import { ServiceScope } from '@microsoft/sp-core-library';
import BaseComponentContext from './BaseComponentContext';
/**
 * [BETA]
 * Base class for client-side components such as BaseClientSideWebPart, BaseExtension, etc.
 *
 * @remarks
 * The constructor for this class is marked as internal; third party code should not inherit
 * directly from this base class.
 *
 * @beta
 */
declare abstract class BaseComponent {
    /**
     * Use context object to access common services and state associated with the component.
     *
     * @remarks
     *
     * Child classes are expected to override this field by redeclaring it with a specialized type.
     * It is meant to be a read-only property; the type cannot be declared as read-only in the base class
     * (because it is initialized outside the constructor), but child classes should redeclare
     * it as readonly.
     *
     * @internalremarks
     *
     * This is a workaround for a missing compiler feature.  If the compiler issue is resolved,
     * then we can convert "context" to an ordinary property getter.
     * https://github.com/Microsoft/TypeScript/issues/338
     */
    context: BaseComponentContext;
    /**
     * The constructor for this class is marked as internal; third party code should not inherit
     * directly from this base class.
     *
     * @internal
     */
    constructor();
    /**
     * @internal
     */
    protected _initializeContext(context: BaseComponentContext): void;
    /**
     * Constructs the object that will be returned by the "services" property.
     *
     * @remarks
     * Child classes can expose additional services by extending the
     * IExtensionServiceCollection interface, and then overriding consumeServices()
     * function and the "services" property.
     */
    protected onProvideServices(serviceScope: ServiceScope): void;
}
export default BaseComponent;
