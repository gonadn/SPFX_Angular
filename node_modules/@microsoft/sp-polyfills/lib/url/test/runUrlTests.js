/// <reference types="mocha" />
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sinon;
if (typeof UNIT_TEST === 'undefined') {
    sinon = require('sinon');
}
var chai_1 = require("chai");
var usm;
if (typeof UNIT_TEST === 'undefined') {
    usm = require('whatwg-url/lib/url-state-machine');
}
function conditionalIt(ignoreCompleteOnly, expectation, testFn) {
    if (!ignoreCompleteOnly) {
        it(expectation, testFn);
    }
}
function conditionalDescribe(ignoreCompleteOnly, description, testFn) {
    if (!ignoreCompleteOnly) {
        describe(description, testFn);
    }
}
// tslint:disable-next-line:variable-name
function runUrlTests(ignoreCompleteOnlyTests, URLType) {
    var serializeURLSpy;
    beforeEach(function () {
        if (typeof UNIT_TEST === 'undefined') {
            serializeURLSpy = sinon.spy(usm, 'serializeURL');
        }
    });
    afterEach(function () {
        if (typeof UNIT_TEST === 'undefined') {
            serializeURLSpy.restore();
        }
    });
    describe('createObjectURL', function () {
        it('should be defined', function () {
            chai_1.expect(URLType.createObjectURL).not.to.be.undefined;
        });
    });
    describe('revokeObjectURL', function () {
        it('should be defined', function () {
            chai_1.expect(URLType.revokeObjectURL).not.to.be.undefined;
        });
    });
    describe('URL constructor', function () {
        it('does not throw with a valid URL', function () {
            chai_1.should().not.throw(function () {
                new URLType('http://contoso.com');
            });
        });
        it('throws with an invalid URL', function () {
            (function () {
                new URLType('://contoso.com');
            }).should.Throw('Invalid URL');
            (function () {
                new URLType('?contoso.com');
            }).should.Throw('Invalid URL');
            (function () {
                new URLType('/contoso');
            }).should.Throw('Invalid URL');
        });
        conditionalIt(ignoreCompleteOnlyTests, 'does not throw with a valid base URL', function () {
            chai_1.should().not.throw(function () {
                new URLType('path/to/something', 'http://fabrikam.com');
            });
            chai_1.should().not.throw(function () {
                new URLType('http://contoso.com/path/to/something', 'http://fabrikam.com');
            });
        });
        conditionalIt(ignoreCompleteOnlyTests, 'throws with an invalid base URL', function () {
            (function () {
                new URLType('path/to/something', '://fabrikam.com');
            }).should.Throw('Invalid base URL');
            (function () {
                new URLType('http://contoso.com/path/to/something', '://fabrikam.com');
            }).should.Throw('Invalid base URL');
            (function () {
                new URLType('path/to/something', '?fabrikam.com');
            }).should.Throw('Invalid base URL');
            (function () {
                new URLType('http://contoso.com/path/to/something', '?fabrikam.com');
            }).should.Throw('Invalid base URL');
            (function () {
                new URLType('path/to/something', '/fabrikam.com');
            }).should.Throw('Invalid base URL');
            (function () {
                new URLType('http://contoso.com/path/to/something', '/fabrikam.com');
            }).should.Throw('Invalid base URL');
        });
        it('supports IRI characters', function () {
            var url = new URLType('http://中文Türkçe.com/中文Türkçe?中文Türkçe=中文Türkçe#中文Türkçe');
            chai_1.expect(url.toJson()).to.equal('http://xn--trke-2oa7j0721dobrb.com/%E4%B8%AD%E6%96%87T%C3%BCrk%C3%A7e?%E4%B8%AD%E6%96%87T%C3%BCrk%C3%A7e=%E4%B8%AD%E6%96%87T%C3%BCrk%C3%A7e#%E4%B8%AD%E6%96%87T%C3%BCrk%C3%A7e'); // tslint:disable-line:max-line-length
        });
    });
    describe('href', function () {
        describe('getter', function () {
            it('re-serializes a simple URL', function () {
                var testUrl = 'http://www.contoso.com/';
                var url = new URLType(testUrl);
                chai_1.expect(url.href).to.equal(testUrl);
            });
            it('re-serializes a complex URL', function () {
                var testUrl = 'http://www.contoso.com:8080/path/to/stuff?query=foobarbaz&search=#hash=stuff';
                var url = new URLType(testUrl);
                chai_1.expect(url.href).to.equal(testUrl);
            });
            it('re-serializes a very complex URL', function () {
                var testUrl = 'http://username:password@www.contoso.com:8080/path/to/stuff?query=foobarbaz&search=#hash=stuff';
                var url = new URLType(testUrl);
                chai_1.expect(url.href).to.equal(testUrl);
            });
            conditionalIt(ignoreCompleteOnlyTests, 're-serializes a relative URL with a base URL', function () {
                var url = new URLType('path/to/stuff?query=foobar&search=#hash=stuff', 'http://www.contoso.com:8080');
                chai_1.expect(url.href).to.equal('http://www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff');
            });
            conditionalIt(ignoreCompleteOnlyTests, 're-serializes an absolute URL with a base URL', function () {
                var url = new URLType('http://fabrikam.com/path/to/stuff?query=foobar&search=#hash=stuff', 'http://www.contoso.com:8080');
                chai_1.expect(url.href).to.equal('http://fabrikam.com/path/to/stuff?query=foobar&search=#hash=stuff');
            });
            it('doesn\'t re-serialize a URL that doesn\'t change between calls to href', function () {
                var testUrl = 'http://www.contoso.com/';
                var url = new URLType(testUrl);
                chai_1.expect(url.href).to.equal(testUrl);
                chai_1.expect(url.href).to.equal(testUrl);
                if (!ignoreCompleteOnlyTests) {
                    chai_1.expect(serializeURLSpy.calledOnce).to.be.true;
                }
            });
            it('appends a trailing slash to a URL constructed without one', function () {
                var url = new URLType('http://www.contoso.com');
                chai_1.expect(url.href).to.equal('http://www.contoso.com/');
            });
        });
        describe('setter', function () {
            it('updates the URL with a simple URL', function () {
                var url = new URLType('http://www.fabrikam.com/');
                var testUrl = 'http://www.contoso.com/';
                url.href = testUrl;
                chai_1.expect(url.href).to.equal(testUrl);
            });
            it('updates the URL with a complex URL', function () {
                var url = new URLType('http://www.fabrikam.com/');
                var testUrl = 'http://www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff';
                url.href = testUrl;
                chai_1.expect(url.href).to.equal(testUrl);
            });
            it('updates the URL with a very complex URL', function () {
                var url = new URLType('http://www.fabrikam.com/');
                var testUrl = 'http://username:password@www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff';
                url.href = testUrl;
                chai_1.expect(url.href).to.equal(testUrl);
            });
            it('throws if href is set with an invalid URL', function () {
                var url = new URLType('http://www.fabrikam.com/');
                (function () {
                    url.href = '://contoso.com';
                }).should.throw('Invalid URL');
            });
            it('does not update if href is set with an invalid URL', function () {
                var testUrl = 'http://www.contoso.com/';
                var url = new URLType(testUrl);
                try {
                    url.href = '://contoso.com';
                }
                catch (e) { }
                chai_1.expect(url.href).to.equal(testUrl);
            });
        });
    });
    describe('toJson', function () {
        it('re-serializes a simple URL', function () {
            var testUrl = 'http://www.contoso.com/';
            var url = new URLType(testUrl);
            chai_1.expect(url.toJson()).to.equal(testUrl);
        });
        it('re-serializes a complex URL', function () {
            var testUrl = 'http://www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff';
            var url = new URLType(testUrl);
            chai_1.expect(url.toJson()).to.equal(testUrl);
        });
        it('re-serializes a very complex URL', function () {
            var testUrl = 'http://username:password@www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff';
            var url = new URLType(testUrl);
            chai_1.expect(url.toJson()).to.equal(testUrl);
        });
        conditionalIt(ignoreCompleteOnlyTests, 're-serializes a relative URL with a base URL', function () {
            var url = new URLType('path/to/stuff?query=foobar&search=#hash=stuff', 'http://www.contoso.com:8080');
            chai_1.expect(url.toJson()).to.equal('http://www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff');
        });
        conditionalIt(ignoreCompleteOnlyTests, 're-serializes an absolute URL with a base URL', function () {
            var url = new URLType('http://fabrikam.com/path/to/stuff?query=foobar&search=#hash=stuff', 'http://www.contoso.com:8080');
            chai_1.expect(url.toJson()).to.equal('http://fabrikam.com/path/to/stuff?query=foobar&search=#hash=stuff');
        });
        it('doesn\'t re-serialize a URL that doesn\'t change between calls to toJson()', function () {
            var testUrl = 'http://www.contoso.com/';
            var url = new URLType(testUrl);
            chai_1.expect(url.toJson()).to.equal(testUrl);
            chai_1.expect(url.toJson()).to.equal(testUrl);
            if (!ignoreCompleteOnlyTests) {
                chai_1.expect(serializeURLSpy.calledOnce).to.be.true;
            }
        });
    });
    describe('origin', function () {
        it('gets the origin from a very simple URL', function () {
            var url = new URLType('http://contoso');
            chai_1.expect(url.origin).to.equal('http://contoso');
        });
        it('gets the origin from a simple URL', function () {
            var url = new URLType('http://www.contoso.com/');
            chai_1.expect(url.origin).to.equal('http://www.contoso.com');
        });
        it('gets the origin from a complex URL', function () {
            var url = new URLType('http://www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff');
            chai_1.expect(url.origin).to.equal('http://www.contoso.com:8080');
        });
        it('gets the origin from a very complex URL', function () {
            var url = new URLType('http://username:password@www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff');
            chai_1.expect(url.origin).to.equal('http://www.contoso.com:8080');
        });
        conditionalIt(ignoreCompleteOnlyTests, 'gets the origin from a relative URL with a base URL', function () {
            var url = new URLType('path/to/stuff?query=foobar&search=#hash=stuff', 'http://www.contoso.com:8080');
            chai_1.expect(url.origin).to.equal('http://www.contoso.com:8080');
        });
        conditionalIt(ignoreCompleteOnlyTests, 'gets the origin from an absolute URL with a base URL', function () {
            var url = new URLType('http://fabrikam.com/path/to/stuff?query=foobar&search=#hash=stuff', 'http://www.contoso.com:8080');
            chai_1.expect(url.origin).to.equal('http://fabrikam.com');
        });
    });
    describe('protocol', function () {
        describe('getter', function () {
            it('gets the protocol from a very simple URL', function () {
                var url = new URLType('http://contoso');
                chai_1.expect(url.protocol).to.equal('http:');
            });
            it('gets the protocol from a simple URL', function () {
                var url = new URLType('http://www.contoso.com/');
                chai_1.expect(url.protocol).to.equal('http:');
            });
            it('gets the protocol from a complex URL', function () {
                var url = new URLType('https://www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff');
                chai_1.expect(url.protocol).to.equal('https:');
            });
            it('gets the protocol from a very complex URL', function () {
                var url = new URLType('sftp://username:password@www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff');
                chai_1.expect(url.protocol).to.equal('sftp:');
            });
            it('supports the "file:" protocol', function () {
                var url = new URLType('file:///C:/users/me/');
                chai_1.expect(url.protocol).to.equal('file:');
            });
            it('does not imply the "file:" scheme for URLs that look like Windows paths', function () {
                var url = new URLType('C:\\users\\me\\');
                chai_1.expect(url.protocol).to.not.equal('file:');
                chai_1.expect(url.protocol).to.equal('c:');
            });
            conditionalIt(ignoreCompleteOnlyTests, 'gets the protocol from a relative URL with a base URL', function () {
                var url = new URLType('path/to/stuff?query=foobar&search=#hash=stuff', 'https://www.contoso.com:8080');
                chai_1.expect(url.protocol).to.equal('https:');
            });
            conditionalIt(ignoreCompleteOnlyTests, 'gets the protocol from an absolute URL with a base URL', function () {
                var url = new URLType('http://fabrikam.com/path/to/stuff?query=foobar&search=#hash=stuff', 'https://www.contoso.com:8080');
                chai_1.expect(url.protocol).to.equal('http:');
            });
        });
        describe('setter', function () {
            it('sets the protocol without a trailing :', function () {
                var url = new URLType('http://contoso');
                url.protocol = 'https';
                chai_1.expect(url.protocol).to.equal('https:');
            });
            it('sets the protocol with a trailing :', function () {
                var url = new URLType('http://contoso');
                url.protocol = 'https:';
                chai_1.expect(url.protocol).to.equal('https:');
            });
            it('updates the href correctly', function () {
                var url = new URLType('http://contoso');
                url.protocol = 'https';
                chai_1.expect(url.href).to.equal('https://contoso/');
            });
            it('does not update the protocol if set with an invalid protocol', function () {
                var url = new URLType('http://contoso');
                url.protocol = 'x:x';
                chai_1.expect(url.href).to.equal('http://contoso/');
            });
        });
    });
    conditionalDescribe(ignoreCompleteOnlyTests, 'username', function () {
        describe('getter', function () {
            it('gets a missing username as an empty string', function () {
                var url = new URLType('http://contoso');
                chai_1.expect(url.username).to.be.empty;
            });
            it('gets a username', function () {
                var url = new URLType('http://user@contoso');
                chai_1.expect(url.username).to.equal('user');
            });
            it('does not decode the username', function () {
                var url = new URLType('http://user%20name@contoso');
                chai_1.expect(url.username).to.equal('user%20name');
            });
        });
        describe('setter', function () {
            it('sets the username on a URL without a username or password', function () {
                var url = new URLType('http://contoso');
                url.username = 'user';
                chai_1.expect(url.username).to.equal('user');
            });
            it('sets the username on a URL with just a password', function () {
                var url = new URLType('http://:password@contoso');
                url.username = 'user';
                chai_1.expect(url.username).to.equal('user');
            });
            it('clears the username when username is set to an empty string', function () {
                var url = new URLType('http://user@contoso');
                url.username = '';
                chai_1.expect(url.username).to.be.empty;
            });
            it('updates the username on a URL with an existing username', function () {
                var url = new URLType('http://user1@contoso');
                url.username = 'user2';
                chai_1.expect(url.username).to.equal('user2');
            });
            it('does not set a username on a URL that does not support a username', function () {
                var url = new URLType('file://contoso');
                url.username = 'user';
                chai_1.expect(url.username).to.be.empty;
            });
            it('updates the href correctly', function () {
                var url = new URLType('http://user1@contoso');
                url.username = 'user2';
                chai_1.expect(url.href).to.equal('http://user2@contoso/');
            });
        });
    });
    conditionalDescribe(ignoreCompleteOnlyTests, 'password', function () {
        describe('getter', function () {
            it('gets a missing password as an empty string', function () {
                var url = new URLType('http://contoso');
                chai_1.expect(url.password).to.be.empty;
            });
            it('gets a password URL with a username and a password', function () {
                var url = new URLType('http://user:password@contoso');
                chai_1.expect(url.password).to.equal('password');
            });
            it('gets a password URL with just a password', function () {
                var url = new URLType('http://:password@contoso');
                chai_1.expect(url.password).to.equal('password');
            });
            it('does not decode the password', function () {
                var url = new URLType('http://:pass%20word@contoso');
                chai_1.expect(url.password).to.equal('pass%20word');
            });
        });
        describe('setter', function () {
            it('sets the password on a URL without a username or password', function () {
                var url = new URLType('http://contoso');
                url.password = 'password';
                chai_1.expect(url.password).to.equal('password');
            });
            it('clears the password when password is set to an empty string', function () {
                var url = new URLType('http://:password@contoso');
                url.password = '';
                chai_1.expect(url.password).to.be.empty;
            });
            it('updates the password on a URL with an existing password', function () {
                var url = new URLType('http://:password1@contoso');
                url.password = 'password2';
                chai_1.expect(url.password).to.equal('password2');
            });
            it('does not set a password on a URL that does not support a password', function () {
                var url = new URLType('file://contoso');
                url.password = 'password';
                chai_1.expect(url.password).to.be.empty;
            });
            it('updates the href correctly', function () {
                var url = new URLType('http://contoso');
                url.password = 'password';
                chai_1.expect(url.href).to.equal('http://:password@contoso/');
            });
        });
    });
    describe('host', function () {
        describe('getter', function () {
            it('gets the host without a port', function () {
                var url = new URLType('http://contoso');
                chai_1.expect(url.host).to.equal('contoso');
            });
            it('gets the host with a port', function () {
                var url = new URLType('http://contoso:8080');
                chai_1.expect(url.host).to.equal('contoso:8080');
            });
            it('gets a missing host as an empty string', function () {
                var url = new URLType('C:');
                chai_1.expect(url.host).to.be.empty;
            });
        });
        describe('setter', function () {
            it('sets the host', function () {
                var url = new URLType('http://contoso');
                url.host = 'fabrikam';
                chai_1.expect(url.host).to.equal('fabrikam');
            });
            it('does not set the host on a URL that does not support a host', function () {
                var url = new URLType('C:');
                url.host = 'contoso';
                chai_1.expect(url.host).to.be.empty;
            });
            it('updates the href correctly', function () {
                var url = new URLType('http://contoso');
                url.host = 'fabrikam';
                chai_1.expect(url.href).to.equal('http://fabrikam/');
            });
        });
    });
    describe('hostname', function () {
        describe('getter', function () {
            it('gets the hostname without a port', function () {
                var url = new URLType('http://contoso');
                chai_1.expect(url.hostname).to.equal('contoso');
            });
            it('gets the host with a port', function () {
                var url = new URLType('http://contoso:8080');
                chai_1.expect(url.hostname).to.equal('contoso');
            });
            it('gets a missing hostname as an empty string', function () {
                var url = new URLType('C:');
                chai_1.expect(url.hostname).to.be.empty;
            });
        });
        describe('setter', function () {
            it('sets the hostname', function () {
                var url = new URLType('http://contoso');
                url.hostname = 'fabrikam';
                chai_1.expect(url.hostname).to.equal('fabrikam');
            });
            it('does not set the hostname on a URL that does not support a host', function () {
                var url = new URLType('C:');
                url.hostname = 'contoso';
                chai_1.expect(url.hostname).to.be.empty;
            });
            it('updates the href correctly', function () {
                var url = new URLType('http://contoso');
                url.hostname = 'fabrikam';
                chai_1.expect(url.href).to.equal('http://fabrikam/');
            });
        });
    });
    describe('port', function () {
        describe('getter', function () {
            it('gets the port', function () {
                var url = new URLType('http://contoso:8080');
                chai_1.expect(url.port).to.equal('8080');
            });
            it('gets a missing port on a URL without a port', function () {
                var url = new URLType('http://contoso');
                chai_1.expect(url.port).to.be.empty;
            });
            it('gets a missing port on a URL that does not support ports', function () {
                var url = new URLType('C:');
                chai_1.expect(url.port).to.be.empty;
            });
        });
        describe('setter', function () {
            it('sets the port on a URL without a port', function () {
                var url = new URLType('http://contoso');
                url.port = '8080';
                chai_1.expect(url.port).to.equal('8080');
            });
            it('sets the port on a URL with a port', function () {
                var url = new URLType('http://contoso:8080');
                url.port = '8888';
                chai_1.expect(url.port).to.equal('8888');
            });
            it('clears the port', function () {
                var url = new URLType('http://contoso:8080');
                url.port = '';
                chai_1.expect(url.port).to.be.empty;
            });
            it('does not set the port on a URL that does not support a host', function () {
                var url = new URLType('C:');
                url.port = '8080';
                chai_1.expect(url.port).to.be.empty;
            });
            it('updates the href correctly', function () {
                var url = new URLType('http://contoso');
                url.port = '8080';
                chai_1.expect(url.href).to.equal('http://contoso:8080/');
            });
        });
    });
    describe('pathname', function () {
        describe('getter', function () {
            it('gets an empty path for a URL with no path', function () {
                var url = new URLType('http://contoso');
                chai_1.expect(url.pathname).to.be.equal('/');
            });
            it('gets a simple path', function () {
                var url = new URLType('http://contoso/path');
                chai_1.expect(url.pathname).to.equal('/path');
            });
            it('gets a more complex path', function () {
                var url = new URLType('http://contoso/path/to/resource.json');
                chai_1.expect(url.pathname).to.equal('/path/to/resource.json');
            });
            it('supports paths containing "."s', function () {
                var url = new URLType('http://contoso/./path/./to/./resource.json');
                chai_1.expect(url.pathname).to.equal('/path/to/resource.json');
            });
            it('supports paths containing ".."s', function () {
                var url = new URLType('http://contoso/path/../to/../resource.json');
                chai_1.expect(url.pathname).to.equal('/resource.json');
            });
            it('supports paths containing "..."s', function () {
                var url = new URLType('http://contoso/path/../to/.../resource.json');
                chai_1.expect(url.pathname).to.equal('/to/.../resource.json');
            });
            it('supports paths containing extra slashes', function () {
                var url1 = new URLType('http://contoso/path//to//resource.json');
                chai_1.expect(url1.pathname).to.equal('/path//to//resource.json');
                var url2 = new URLType('http://contoso/path///to///resource.json//');
                chai_1.expect(url2.pathname).to.equal('/path///to///resource.json//');
            });
            it('supports paths containing encoded special characters', function () {
                // %25=%  %2F=/  %3F=?  %3D==  %26=&  %23=#
                var url = new URLType('http://contoso/(%25%2F%3F%3D%26%23)');
                chai_1.expect(url.pathname).to.equal('/(%25%2F%3F%3D%26%23)');
            });
            it('supports paths containing encoded slash characters', function () {
                var url = new URLType('http://contoso/path%2Fto/my%2Fresource.json');
                chai_1.expect(url.pathname).to.equal('/path%2Fto/my%2Fresource.json');
            });
            it('gets the first part of the path for a URL that does not have a hostname', function () {
                var url = new URLType('C:\\path');
                if (ignoreCompleteOnlyTests) {
                    chai_1.expect(url.pathname).to.equal('/path');
                }
                else {
                    chai_1.expect(url.pathname).to.equal('\\path');
                }
            });
            it('supports the "file:" protocol', function () {
                var url = new URLType('file:///C:/users/me/');
                chai_1.expect(url.pathname).to.equal('/C:/users/me/');
            });
        });
        describe('setter', function () {
            it('sets the path on a URL with no path', function () {
                var url = new URLType('http://contoso');
                url.pathname = 'path/to/resource';
                chai_1.expect(url.pathname).to.equal('/path/to/resource');
            });
            it('sets the path on a URL with a path', function () {
                var url = new URLType('http://contoso/index.html');
                url.pathname = 'path/to/resource';
                chai_1.expect(url.pathname).to.equal('/path/to/resource');
            });
            it('clears the path on a URL with a path', function () {
                var url = new URLType('http://contoso/index.html');
                url.pathname = '';
                chai_1.expect(url.pathname).to.be.equal('/');
            });
            it('updates the path correctly when set to a path with a leading slash', function () {
                var url = new URLType('http://contoso');
                url.pathname = '/path/to/resource';
                chai_1.expect(url.pathname).to.equal('/path/to/resource');
            });
            it('updates the path correctly when set to a path with a trailing slash', function () {
                var url = new URLType('http://contoso');
                url.pathname = 'path/to/resource/';
                chai_1.expect(url.pathname).to.equal('/path/to/resource/');
            });
            it('accepts paths containing "."s', function () {
                var url = new URLType('http://contoso');
                url.pathname = './path/./to/./resource.json';
                chai_1.expect(url.pathname).to.equal('/path/to/resource.json');
            });
            it('accepts paths containing ".."s', function () {
                var url = new URLType('http://contoso');
                url.pathname = 'path/../to/../resource.json';
                chai_1.expect(url.pathname).to.equal('/resource.json');
            });
            it('accepts paths containing "..."s', function () {
                var url = new URLType('http://contoso');
                url.pathname = 'path/../to/.../resource.json';
                chai_1.expect(url.pathname).to.equal('/to/.../resource.json');
            });
            it('accepts paths containing extra slashes', function () {
                var url1 = new URLType('http://contoso');
                url1.pathname = 'path//to//resource.json';
                chai_1.expect(url1.pathname).to.equal('/path//to//resource.json');
                var url2 = new URLType('http://contoso');
                url2.pathname = 'path///to///resource.json//';
                chai_1.expect(url2.pathname).to.equal('/path///to///resource.json//');
            });
            it('accepts paths containing encoded special characters', function () {
                // %25=%  %2F=/  %3F=?  %3D==  %26=&  %23=#
                var url = new URLType('http://contoso');
                url.pathname = '(%25%2F%3F%3D%26%23)';
                if (ignoreCompleteOnlyTests) {
                    chai_1.expect(url.pathname).to.equal('/(%2525%252F%253F%253D%2526%2523)');
                }
                else {
                    chai_1.expect(url.pathname).to.equal('/(%25%2F%3F%3D%26%23)');
                }
            });
            it('accepts paths containing encoded slash characters', function () {
                var url = new URLType('http://contoso');
                url.pathname = 'path%2Fto/my%2Fresource.json';
                if (ignoreCompleteOnlyTests) {
                    chai_1.expect(url.pathname).to.equal('/path%252Fto/my%252Fresource.json');
                }
                else {
                    chai_1.expect(url.pathname).to.equal('/path%2Fto/my%2Fresource.json');
                }
            });
            it('accepts the href correctly', function () {
                var url = new URLType('http://contoso');
                url.pathname = 'path/to/resource';
                chai_1.expect(url.href).to.equal('http://contoso/path/to/resource');
            });
            it('updates the path correctly when set to a path with a trailing slash', function () {
                var url = new URLType('http://contoso');
                url.pathname = 'path/to/resource/';
                chai_1.expect(url.href).to.equal('http://contoso/path/to/resource/');
            });
        });
    });
    describe('search', function () {
        describe('getter', function () {
            it('gets an empty querystring correctly', function () {
                var url = new URLType('http://contoso');
                chai_1.expect(url.search).to.be.empty;
            });
            it('gets an empty querystring from a source URL with a trailing ?', function () {
                var url = new URLType('http://contoso?');
                chai_1.expect(url.search).to.be.empty;
            });
            it('gets a querystring correctly', function () {
                var url = new URLType('http://contoso?query');
                chai_1.expect(url.search).to.equal('?query');
            });
            it('correctly parses a querystring with a "?" in it', function () {
                var url = new URLType('http://contoso/a?a=?');
                chai_1.expect(url.search).to.equal('?a=?');
            });
            it('correctly parses a querystring with a "/" in it', function () {
                var url = new URLType('http://contoso/a?ghi/jkl');
                chai_1.expect(url.search).to.equal('?ghi/jkl');
            });
        });
        describe('setter', function () {
            it('sets a querystring on a URL without one', function () {
                var url = new URLType('http://contoso');
                url.search = 'query';
                chai_1.expect(url.search).to.equal('?query');
            });
            it('updates a querystring on a URL with an existing querystring one', function () {
                var url = new URLType('http://contoso?search');
                url.search = 'query';
                chai_1.expect(url.search).to.equal('?query');
            });
            it('supports setting the querystring with a value that has a leading ?', function () {
                var url = new URLType('http://contoso');
                url.search = '?query';
                chai_1.expect(url.search).to.equal('?query');
            });
            it('clears the querystring when set to an empty string', function () {
                var url = new URLType('http://contoso?query');
                url.search = '';
                chai_1.expect(url.search).to.be.empty;
            });
            it('clears the querystring when set to ?', function () {
                var url = new URLType('http://contoso?query');
                url.search = '?';
                chai_1.expect(url.search).to.be.empty;
            });
            it('accepts a querystring containing a "?"', function () {
                var url = new URLType('http://contoso?query');
                url.search = 'a=?';
                chai_1.expect(url.search).to.equal('?a=?');
            });
            it('accepts a querystring containing "/"', function () {
                var url = new URLType('http://contoso/a?query');
                url.search = 'ghi/jkl';
                chai_1.expect(url.search).to.equal('?ghi/jkl');
            });
            it('updates the href correctly when the querystring is added', function () {
                var url = new URLType('http://contoso');
                url.search = 'query';
                chai_1.expect(url.href).to.equal('http://contoso/?query');
            });
            it('updates the href correctly when the querystring is removed', function () {
                var url = new URLType('http://contoso?query');
                url.search = '';
                chai_1.expect(url.href).to.equal('http://contoso/');
            });
            it('updates the href correctly when the querystring is updated', function () {
                var url = new URLType('http://contoso?query');
                url.search = 'search';
                chai_1.expect(url.href).to.equal('http://contoso/?search');
            });
            it('updates the searchParams object', function () {
                var url = new URLType('http://contoso?query');
                var searchParams = url.searchParams;
                url.search = 'abc=def';
                chai_1.expect(searchParams.toString()).to.equal('abc=def');
            });
        });
    });
    describe('searchParams', function () {
        it('returns a correct URLSearchParams object', function () {
            var url = new URLType('http://contoso?a=b&c=d');
            chai_1.expect(url.searchParams.get('a')).to.equal('b');
        });
        it('always returns the same object', function () {
            var url = new URLType('http://contoso?a=b&c=d');
            var searchParams = url.searchParams;
            chai_1.expect(url.searchParams).to.equal(searchParams);
            url.search = 'search';
            chai_1.expect(url.searchParams).to.equal(searchParams);
        });
    });
    describe('hash', function () {
        describe('getter', function () {
            it('gets an empty fragment correctly', function () {
                var url = new URLType('http://contoso');
                chai_1.expect(url.hash).to.be.empty;
            });
            it('gets an empty fragment from a source URL with a trailing #', function () {
                var url = new URLType('http://contoso#');
                chai_1.expect(url.hash).to.be.empty;
            });
            it('gets a fragment correctly', function () {
                var url = new URLType('http://contoso#fragment');
                chai_1.expect(url.hash).to.equal('#fragment');
            });
            it('correctly parses a fragment with a "?" in it', function () {
                var url = new URLType('http://contoso#a=?');
                chai_1.expect(url.hash).to.equal('#a=?');
            });
            it('correctly parses a fragment with a "#" in it', function () {
                var url = new URLType('http://contoso#a=#');
                chai_1.expect(url.hash).to.equal('#a=#');
            });
        });
        describe('setter', function () {
            it('sets a fragment on a URL without one', function () {
                var url = new URLType('http://contoso');
                url.hash = 'fragment';
                chai_1.expect(url.hash).to.equal('#fragment');
            });
            it('updates a fragment on a URL with an existing fragment one', function () {
                var url = new URLType('http://contoso#hash');
                url.hash = 'fragment';
                chai_1.expect(url.hash).to.equal('#fragment');
            });
            it('supports setting the fragment with a value that has a leading #', function () {
                var url = new URLType('http://contoso');
                url.hash = '#fragment';
                chai_1.expect(url.hash).to.equal('#fragment');
            });
            it('clears the fragment when set to an empty string', function () {
                var url = new URLType('http://contoso#fragment');
                url.hash = '';
                chai_1.expect(url.hash).to.be.empty;
            });
            it('clears the fragment when set to #', function () {
                var url = new URLType('http://contoso#fragment');
                url.hash = '#';
                chai_1.expect(url.hash).to.be.empty;
            });
            it('accepts a fragment containing a "?"', function () {
                var url = new URLType('http://contoso#fragment');
                url.hash = 'a=?';
                chai_1.expect(url.hash).to.equal('#a=?');
            });
            it('accepts a fragment containing a "#"', function () {
                var url = new URLType('http://contoso#fragment');
                url.hash = 'a=#';
                chai_1.expect(url.hash).to.equal('#a=#');
            });
            it('accepts a fragment containing "/"', function () {
                var url = new URLType('http://contoso/a#fragment');
                url.hash = 'abc?def&ghi=jkl/mno';
                chai_1.expect(url.hash).to.equal('#abc?def&ghi=jkl/mno');
            });
            it('updates the href correctly when the fragment is added', function () {
                var url = new URLType('http://contoso');
                url.hash = 'fragment';
                chai_1.expect(url.href).to.equal('http://contoso/#fragment');
            });
            it('updates the href correctly when the fragment is removed', function () {
                var url = new URLType('http://contoso#fragment');
                url.hash = '';
                chai_1.expect(url.href).to.equal('http://contoso/');
            });
            it('updates the href correctly when the fragment is updated', function () {
                var url = new URLType('http://contoso#fragment');
                url.hash = 'hash';
                chai_1.expect(url.href).to.equal('http://contoso/#hash');
            });
        });
    });
}
exports.runUrlTests = runUrlTests;

//# sourceMappingURL=runUrlTests.js.map
