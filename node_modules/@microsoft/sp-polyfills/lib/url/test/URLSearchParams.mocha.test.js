/// <reference types="mocha" />
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var URLSearchParams_1 = require("./../URLSearchParams");
var URL_complete_1 = require("./../experimental/URL-complete");
describe('URLSearchParams', function () {
    describe('constructor', function () {
        describe('with an array', function () {
            it('accepts an array', function () {
                var searchParams = new URLSearchParams_1.default([['a', 'b'], ['c', 'd']]);
                chai_1.expect(searchParams.toString()).to.equal('a=b&c=d');
            });
            it('throws an exception if an element of the array doesn\'t have two elements', function () {
                var expectedException = 'All elements in init sequence must have exactly two elements';
                (function () { return new URLSearchParams_1.default([['a']]); }).should.throw(expectedException);
                (function () { return new URLSearchParams_1.default([['a', 'b', 'c']]); }).should.throw(expectedException);
                (function () { return new URLSearchParams_1.default([[]]); }).should.throw(expectedException);
            });
            it('does not decode elements', function () {
                var searchParams = new URLSearchParams_1.default([['%23', 'b']]);
                chai_1.expect(searchParams.toString()).to.equal('%2523=b');
            });
            it('accepts an empty array', function () {
                var searchParams = new URLSearchParams_1.default([]);
                chai_1.expect(searchParams.toString()).to.equal('');
            });
        });
        describe('with an object', function () {
            it('accepts an object', function () {
                var searchParams = new URLSearchParams_1.default({ a: 'b', c: 'd' });
                chai_1.expect(searchParams.toString()).to.equal('a=b&c=d');
            });
            it('does not decode elements', function () {
                var searchParams = new URLSearchParams_1.default({ a: '%23' });
                chai_1.expect(searchParams.toString()).to.equal('a=%2523');
            });
            it('accepts an empty object', function () {
                var searchParams = new URLSearchParams_1.default({});
                chai_1.expect(searchParams.toString()).to.equal('');
            });
        });
        describe('with a string', function () {
            it('deserializes a string correctly', function () {
                var searchParams = new URLSearchParams_1.default('a=b&c=d');
                chai_1.expect(searchParams.toString()).to.equal('a=b&c=d');
            });
            it('decodes elements of the string correctly', function () {
                var searchParams = new URLSearchParams_1.default('a=%23&c=d');
                chai_1.expect(searchParams.get('a')).to.equal('#');
            });
            it('accepts tokens without an =', function () {
                var searchParams = new URLSearchParams_1.default('abc');
                chai_1.expect(searchParams.get('abc')).to.be.empty;
                chai_1.expect(searchParams.toString()).to.equal('abc=');
            });
            it('accepts tokens with a leading =', function () {
                var searchParams = new URLSearchParams_1.default('=abc');
                chai_1.expect(searchParams.get('')).to.equal('abc');
                chai_1.expect(searchParams.toString()).to.equal('=abc');
            });
            it('accepts tokens with a trailing =', function () {
                var searchParams = new URLSearchParams_1.default('abc=');
                chai_1.expect(searchParams.get('abc')).to.be.empty;
                chai_1.expect(searchParams.toString()).to.equal('abc=');
            });
            it('trims a leading ?', function () {
                var searchParams = new URLSearchParams_1.default('?a=b&c=d');
                chai_1.expect(searchParams.toString()).to.equal('a=b&c=d');
            });
            it('replaces +s with spaces', function () {
                var searchParams = new URLSearchParams_1.default('a+b=b+c&c+d=d+e');
                chai_1.expect(searchParams.get('a b')).to.equal('b c');
                chai_1.expect(searchParams.get('c d')).to.equal('d e');
            });
            it('accepts a "?" value', function () {
                var searchParams = new URLSearchParams_1.default('?a=?');
                chai_1.expect(searchParams.get('a')).to.equal('?');
                chai_1.expect(searchParams.toString()).to.equal('a=%3F');
            });
            it('accepts "/"s', function () {
                var searchParams = new URLSearchParams_1.default('?ghi/jkl');
                chai_1.expect(searchParams.get('ghi/jkl')).to.be.empty;
                chai_1.expect(searchParams.toString()).to.equal('ghi%2Fjkl=');
            });
            it('supports encoded special characters', function () {
                // %25=%  %2F=/  %3F=?  %3D==  %26=&  %23=#
                var searchParams = new URLSearchParams_1.default('?(%25%2F%3F%3D%26%23)=(%25%2F%3F%3D%26%23)&(%25%2F%3F%3D%23%26)');
                chai_1.expect(searchParams.get('(%/?=&#)')).to.equal('(%/?=&#)');
                chai_1.expect(searchParams.get('(%/?=#&)')).to.be.empty;
                chai_1.expect(searchParams.toString()).to.equal('(%25%2F%3F%3D%26%23)=(%25%2F%3F%3D%26%23)&(%25%2F%3F%3D%23%26)=');
            });
        });
        describe('with nothing', function () {
            it('constructs an object with an empty set of parameters', function () {
                var searchParams = new URLSearchParams_1.default();
                chai_1.expect(searchParams.toString()).to.be.empty;
            });
        });
    });
    describe('append', function () {
        it('appends an element to the list of parameters', function () {
            var searchParams = new URLSearchParams_1.default('a=b');
            searchParams.append('c', 'd');
            chai_1.expect(searchParams.toString()).to.equal('a=b&c=d');
        });
        it('appends an element to an empty list of parameters', function () {
            var searchParams = new URLSearchParams_1.default();
            searchParams.append('a', 'b');
            chai_1.expect(searchParams.toString()).to.equal('a=b');
        });
        it('allows parameters to be appended more than once', function () {
            var searchParams = new URLSearchParams_1.default();
            searchParams.append('a', 'b');
            searchParams.append('a', 'b');
            chai_1.expect(searchParams.toString()).to.equal('a=b&a=b');
        });
        it('does not decode arguments to append', function () {
            var searchParams = new URLSearchParams_1.default();
            searchParams.append('a', '%23');
            chai_1.expect(searchParams.toString()).to.equal('a=%2523');
        });
        it('updates the parent URL object', function () {
            var url = new URL_complete_1.default('http://contoso.com?a=b');
            url.searchParams.append('c', 'd');
            chai_1.expect(url.search).to.equal('?a=b&c=d');
        });
    });
    describe('delete', function () {
        it('deletes a parameter with a unique key', function () {
            var searchParams = new URLSearchParams_1.default('a=b&c=d&e=f');
            searchParams.delete('c');
            chai_1.expect(searchParams.toString()).to.equal('a=b&e=f');
        });
        it('deletes all parameters with non-unique keys', function () {
            var searchParams = new URLSearchParams_1.default('c=b&c=d&e=f');
            searchParams.delete('c');
            chai_1.expect(searchParams.toString()).to.equal('e=f');
        });
        it('deletes all parameters if all parameters have the same key', function () {
            var searchParams = new URLSearchParams_1.default('c=b&c=d&c=f');
            searchParams.delete('c');
            chai_1.expect(searchParams.toString()).to.be.empty;
        });
        it('deletes nothing if the key is not present', function () {
            var searchParams = new URLSearchParams_1.default('a=b&c=d&e=f');
            searchParams.delete('g');
            chai_1.expect(searchParams.toString()).to.equal('a=b&c=d&e=f');
        });
        it('updates the parent URL object', function () {
            var url = new URL_complete_1.default('http://contoso.com?a=b&c=d&e=f');
            url.searchParams.delete('c');
            chai_1.expect(url.search).to.equal('?a=b&e=f');
        });
    });
    describe('get', function () {
        it('gets a parameter\'s value', function () {
            var searchParams = new URLSearchParams_1.default('a=b&c=d&e=f');
            chai_1.expect(searchParams.get('a')).to.equal('b');
        });
        it('returns null for a missing parameter', function () {
            var searchParams = new URLSearchParams_1.default('a=b&c=d&e=f');
            chai_1.expect(searchParams.get('g')).to.be.null;
        });
        it('gets the first instance of parameter\'s value with a non-unique key', function () {
            var searchParams = new URLSearchParams_1.default('a=b&a=d&e=f');
            chai_1.expect(searchParams.get('a')).to.equal('b');
        });
    });
    describe('getAll', function () {
        it('gets a parameter\'s value with a unique key', function () {
            var searchParams = new URLSearchParams_1.default('a=b&c=d&e=f');
            matchExpectedArray(searchParams.getAll('a'), ['b']);
        });
        it('returns an empty array for a missing parameter', function () {
            var searchParams = new URLSearchParams_1.default('a=b&c=d&e=f');
            matchExpectedArray(searchParams.getAll('g'), []);
        });
        it('gets all instances of parameter\'s value with a non-unique key', function () {
            var searchParams = new URLSearchParams_1.default('a=b&a=d&e=f');
            matchExpectedArray(searchParams.getAll('a'), ['b', 'd']);
        });
    });
    describe('has', function () {
        it('returns true for a parameter that exists with a unique key', function () {
            var searchParams = new URLSearchParams_1.default('a=b&c=d&e=f');
            chai_1.expect(searchParams.has('a')).to.be.true;
        });
        it('returns false for a missing parameter', function () {
            var searchParams = new URLSearchParams_1.default('a=b&c=d&e=f');
            chai_1.expect(searchParams.has('g')).to.be.false;
        });
        it('returns true for a parameter that exists with a non-unique key', function () {
            var searchParams = new URLSearchParams_1.default('a=b&a=d&e=f');
            chai_1.expect(searchParams.has('a')).to.be.true;
        });
    });
    describe('set', function () {
        it('sets a value with a unique key', function () {
            var searchParams = new URLSearchParams_1.default('a=b&c=d&e=f');
            searchParams.set('a', 'g');
            chai_1.expect(searchParams.toString()).to.equal('a=g&c=d&e=f');
        });
        it('sets the first value with a non-unique key and removes the other keys\' parameters (1)', function () {
            var searchParams = new URLSearchParams_1.default('a=b&a=d&a=f');
            searchParams.set('a', 'g');
            chai_1.expect(searchParams.toString()).to.equal('a=g');
        });
        it('sets the first value with a non-unique key and removes the other keys\' parameters (2)', function () {
            var searchParams = new URLSearchParams_1.default('x=y&x=z&a=b&a=d&a=f');
            searchParams.set('a', 'g');
            chai_1.expect(searchParams.toString()).to.equal('x=y&x=z&a=g');
        });
        it('appends a new parameter if the key doesn\'t already exist', function () {
            var searchParams = new URLSearchParams_1.default('a=b&c=d&e=f');
            searchParams.set('x', 'y');
            chai_1.expect(searchParams.toString()).to.equal('a=b&c=d&e=f&x=y');
        });
        it('updates the parent URL object', function () {
            var url = new URL_complete_1.default('http://contoso.com?a=b&c=d&e=f');
            url.searchParams.set('a', 'g');
            chai_1.expect(url.search).to.equal('?a=g&c=d&e=f');
        });
    });
    describe('sort', function () {
        it('does nothing for an empty parameter set', function () {
            var searchParams = new URLSearchParams_1.default();
            searchParams.sort();
            chai_1.expect(searchParams.toString()).to.be.empty;
        });
        it('sorts a parameter set by keys', function () {
            var searchParams = new URLSearchParams_1.default('c=d&a=b');
            searchParams.sort();
            chai_1.expect(searchParams.toString()).to.equal('a=b&c=d');
        });
        it('is stable', function () {
            var searchParams = new URLSearchParams_1.default('a=g&c=d&a=b');
            searchParams.sort();
            chai_1.expect(searchParams.toString()).to.equal('a=g&a=b&c=d');
        });
        it('updates the parent URL object', function () {
            var url = new URL_complete_1.default('http://contoso.com?a=g&c=d&a=b');
            url.searchParams.sort();
            chai_1.expect(url.search).to.equal('?a=g&a=b&c=d');
        });
    });
    describe('toString', function () {
        it('serializes a set of parameters correctly', function () {
            var searchParams = new URLSearchParams_1.default('a=b&c=d&e=f');
            chai_1.expect(searchParams.toString()).to.equal('a=b&c=d&e=f');
        });
        it('encodes parameters', function () {
            var searchParams = new URLSearchParams_1.default({ '#!': '^&' });
            chai_1.expect(searchParams.toString()).to.equal('%23!=%5E%26');
        });
    });
});
function matchExpectedArray(actual, expected) {
    chai_1.expect(actual.length).to.equal(expected.length);
    for (var i = 0; i < actual.length; i++) {
        chai_1.expect(actual[i]).to.equal(expected[i]);
    }
}

//# sourceMappingURL=URLSearchParams.mocha.test.js.map
