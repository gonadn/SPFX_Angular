{"version":3,"sources":["url/test/URLSearchParams.mocha.test.ts"],"names":[],"mappings":"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","file":"url/test/URLSearchParams.mocha.test.js","sourcesContent":["/// <reference types=\"mocha\" />\r\n\r\nimport { expect, should } from 'chai';\r\nimport URLSearchParams from './../URLSearchParams';\r\nimport URL from './../experimental/URL-complete';\r\n\r\ndescribe('URLSearchParams', () => {\r\n  describe('constructor', () => {\r\n    describe('with an array', () => {\r\n      it('accepts an array', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams([['a', 'b'], ['c', 'd']]);\r\n        expect(searchParams.toString()).to.equal('a=b&c=d');\r\n      });\r\n\r\n      it('throws an exception if an element of the array doesn\\'t have two elements', () => {\r\n        const expectedException: string = 'All elements in init sequence must have exactly two elements';\r\n\r\n        (() => new URLSearchParams([['a']])).should.throw(expectedException);\r\n        (() => new URLSearchParams([['a', 'b', 'c']])).should.throw(expectedException);\r\n        (() => new URLSearchParams([[]])).should.throw(expectedException);\r\n      });\r\n\r\n      it('does not decode elements', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams([['%23', 'b']]);\r\n        expect(searchParams.toString()).to.equal('%2523=b');\r\n      });\r\n\r\n      it('accepts an empty array', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams([]);\r\n        expect(searchParams.toString()).to.equal('');\r\n      });\r\n    });\r\n\r\n    describe('with an object', () => {\r\n      it('accepts an object', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams({ a: 'b', c: 'd' });\r\n        expect(searchParams.toString()).to.equal('a=b&c=d');\r\n      });\r\n\r\n      it('does not decode elements', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams({ a: '%23' });\r\n        expect(searchParams.toString()).to.equal('a=%2523');\r\n      });\r\n\r\n      it('accepts an empty object', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams({});\r\n        expect(searchParams.toString()).to.equal('');\r\n      });\r\n    });\r\n\r\n    describe('with a string', () => {\r\n      it('deserializes a string correctly', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams('a=b&c=d');\r\n        expect(searchParams.toString()).to.equal('a=b&c=d');\r\n      });\r\n\r\n      it('decodes elements of the string correctly', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams('a=%23&c=d');\r\n        expect(searchParams.get('a')).to.equal('#');\r\n      });\r\n\r\n      it('accepts tokens without an =', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams('abc');\r\n        expect(searchParams.get('abc')).to.be.empty;\r\n        expect(searchParams.toString()).to.equal('abc=');\r\n      });\r\n\r\n      it('accepts tokens with a leading =', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams('=abc');\r\n        expect(searchParams.get('')).to.equal('abc');\r\n        expect(searchParams.toString()).to.equal('=abc');\r\n      });\r\n\r\n      it('accepts tokens with a trailing =', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams('abc=');\r\n        expect(searchParams.get('abc')).to.be.empty;\r\n        expect(searchParams.toString()).to.equal('abc=');\r\n      });\r\n\r\n      it('trims a leading ?', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams('?a=b&c=d');\r\n        expect(searchParams.toString()).to.equal('a=b&c=d');\r\n      });\r\n\r\n      it('replaces +s with spaces', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams('a+b=b+c&c+d=d+e');\r\n        expect(searchParams.get('a b')).to.equal('b c');\r\n        expect(searchParams.get('c d')).to.equal('d e');\r\n      });\r\n\r\n      it('accepts a \"?\" value', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams('?a=?');\r\n        expect(searchParams.get('a')).to.equal('?');\r\n        expect(searchParams.toString()).to.equal('a=%3F');\r\n      });\r\n\r\n      it('accepts \"/\"s', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams('?ghi/jkl');\r\n        expect(searchParams.get('ghi/jkl')).to.be.empty;\r\n        expect(searchParams.toString()).to.equal('ghi%2Fjkl=');\r\n      });\r\n\r\n      it('supports encoded special characters', () => {\r\n        // %25=%  %2F=/  %3F=?  %3D==  %26=&  %23=#\r\n        const searchParams: URLSearchParams =\r\n          new URLSearchParams('?(%25%2F%3F%3D%26%23)=(%25%2F%3F%3D%26%23)&(%25%2F%3F%3D%23%26)');\r\n        expect(searchParams.get('(%/?=&#)')).to.equal('(%/?=&#)');\r\n        expect(searchParams.get('(%/?=#&)')).to.be.empty;\r\n        expect(searchParams.toString()).to.equal('(%25%2F%3F%3D%26%23)=(%25%2F%3F%3D%26%23)&(%25%2F%3F%3D%23%26)=');\r\n      });\r\n    });\r\n\r\n    describe('with nothing', () => {\r\n      it('constructs an object with an empty set of parameters', () => {\r\n        const searchParams: URLSearchParams = new URLSearchParams();\r\n        expect(searchParams.toString()).to.be.empty;\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('append', () => {\r\n    it('appends an element to the list of parameters', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b');\r\n      searchParams.append('c', 'd');\r\n      expect(searchParams.toString()).to.equal('a=b&c=d');\r\n    });\r\n\r\n    it('appends an element to an empty list of parameters', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams();\r\n      searchParams.append('a', 'b');\r\n      expect(searchParams.toString()).to.equal('a=b');\r\n    });\r\n\r\n    it('allows parameters to be appended more than once', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams();\r\n      searchParams.append('a', 'b');\r\n      searchParams.append('a', 'b');\r\n      expect(searchParams.toString()).to.equal('a=b&a=b');\r\n    });\r\n\r\n    it('does not decode arguments to append', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams();\r\n      searchParams.append('a', '%23');\r\n      expect(searchParams.toString()).to.equal('a=%2523');\r\n    });\r\n\r\n    it('updates the parent URL object', () => {\r\n      const url: URL = new URL('http://contoso.com?a=b');\r\n      url.searchParams.append('c', 'd');\r\n      expect(url.search).to.equal('?a=b&c=d');\r\n    });\r\n  });\r\n\r\n  describe('delete', () => {\r\n    it('deletes a parameter with a unique key', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b&c=d&e=f');\r\n      searchParams.delete('c');\r\n      expect(searchParams.toString()).to.equal('a=b&e=f');\r\n    });\r\n\r\n    it('deletes all parameters with non-unique keys', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('c=b&c=d&e=f');\r\n      searchParams.delete('c');\r\n      expect(searchParams.toString()).to.equal('e=f');\r\n    });\r\n\r\n    it('deletes all parameters if all parameters have the same key', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('c=b&c=d&c=f');\r\n      searchParams.delete('c');\r\n      expect(searchParams.toString()).to.be.empty;\r\n    });\r\n\r\n    it('deletes nothing if the key is not present', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b&c=d&e=f');\r\n      searchParams.delete('g');\r\n      expect(searchParams.toString()).to.equal('a=b&c=d&e=f');\r\n    });\r\n\r\n    it('updates the parent URL object', () => {\r\n      const url: URL = new URL('http://contoso.com?a=b&c=d&e=f');\r\n      url.searchParams.delete('c');\r\n      expect(url.search).to.equal('?a=b&e=f');\r\n    });\r\n  });\r\n\r\n  describe('get', () => {\r\n    it('gets a parameter\\'s value', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b&c=d&e=f');\r\n      expect(searchParams.get('a')).to.equal('b');\r\n    });\r\n\r\n    it('returns null for a missing parameter', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b&c=d&e=f');\r\n      expect(searchParams.get('g')).to.be.null;\r\n    });\r\n\r\n    it('gets the first instance of parameter\\'s value with a non-unique key', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b&a=d&e=f');\r\n      expect(searchParams.get('a')).to.equal('b');\r\n    });\r\n  });\r\n\r\n  describe('getAll', () => {\r\n    it('gets a parameter\\'s value with a unique key', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b&c=d&e=f');\r\n      matchExpectedArray(searchParams.getAll('a'), ['b']);\r\n    });\r\n\r\n    it('returns an empty array for a missing parameter', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b&c=d&e=f');\r\n      matchExpectedArray(searchParams.getAll('g'), []);\r\n    });\r\n\r\n    it('gets all instances of parameter\\'s value with a non-unique key', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b&a=d&e=f');\r\n      matchExpectedArray(searchParams.getAll('a'), ['b', 'd']);\r\n    });\r\n  });\r\n\r\n  describe('has', () => {\r\n    it('returns true for a parameter that exists with a unique key', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b&c=d&e=f');\r\n      expect(searchParams.has('a')).to.be.true;\r\n    });\r\n\r\n    it('returns false for a missing parameter', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b&c=d&e=f');\r\n      expect(searchParams.has('g')).to.be.false;\r\n    });\r\n\r\n    it('returns true for a parameter that exists with a non-unique key', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b&a=d&e=f');\r\n      expect(searchParams.has('a')).to.be.true;\r\n    });\r\n  });\r\n\r\n  describe('set', () => {\r\n    it('sets a value with a unique key', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b&c=d&e=f');\r\n      searchParams.set('a', 'g');\r\n      expect(searchParams.toString()).to.equal('a=g&c=d&e=f');\r\n    });\r\n\r\n    it('sets the first value with a non-unique key and removes the other keys\\' parameters (1)', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b&a=d&a=f');\r\n      searchParams.set('a', 'g');\r\n      expect(searchParams.toString()).to.equal('a=g');\r\n    });\r\n\r\n    it('sets the first value with a non-unique key and removes the other keys\\' parameters (2)', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('x=y&x=z&a=b&a=d&a=f');\r\n      searchParams.set('a', 'g');\r\n      expect(searchParams.toString()).to.equal('x=y&x=z&a=g');\r\n    });\r\n\r\n    it('appends a new parameter if the key doesn\\'t already exist', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b&c=d&e=f');\r\n      searchParams.set('x', 'y');\r\n      expect(searchParams.toString()).to.equal('a=b&c=d&e=f&x=y');\r\n    });\r\n\r\n    it('updates the parent URL object', () => {\r\n      const url: URL = new URL('http://contoso.com?a=b&c=d&e=f');\r\n      url.searchParams.set('a', 'g');\r\n      expect(url.search).to.equal('?a=g&c=d&e=f');\r\n    });\r\n  });\r\n\r\n  describe('sort', () => {\r\n    it('does nothing for an empty parameter set', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams();\r\n      searchParams.sort();\r\n      expect(searchParams.toString()).to.be.empty;\r\n    });\r\n\r\n    it('sorts a parameter set by keys', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('c=d&a=b');\r\n      searchParams.sort();\r\n      expect(searchParams.toString()).to.equal('a=b&c=d');\r\n    });\r\n\r\n    it('is stable', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=g&c=d&a=b');\r\n      searchParams.sort();\r\n      expect(searchParams.toString()).to.equal('a=g&a=b&c=d');\r\n    });\r\n\r\n    it('updates the parent URL object', () => {\r\n      const url: URL = new URL('http://contoso.com?a=g&c=d&a=b');\r\n      url.searchParams.sort();\r\n      expect(url.search).to.equal('?a=g&a=b&c=d');\r\n    });\r\n  });\r\n\r\n  describe('toString', () => {\r\n    it('serializes a set of parameters correctly', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams('a=b&c=d&e=f');\r\n      expect(searchParams.toString()).to.equal('a=b&c=d&e=f');\r\n    });\r\n\r\n    it('encodes parameters', () => {\r\n      const searchParams: URLSearchParams = new URLSearchParams({ '#!': '^&' });\r\n      expect(searchParams.toString()).to.equal('%23!=%5E%26');\r\n    });\r\n  });\r\n});\r\n\r\nfunction matchExpectedArray(actual: string[], expected: string[]): void {\r\n  expect(actual.length).to.equal(expected.length);\r\n  for (let i: number = 0; i < actual.length; i++) {\r\n    expect(actual[i]).to.equal(expected[i]);\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}