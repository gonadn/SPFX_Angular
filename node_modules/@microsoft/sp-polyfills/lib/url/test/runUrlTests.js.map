{"version":3,"sources":["url/test/runUrlTests.ts"],"names":[],"mappings":"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","file":"url/test/runUrlTests.js","sourcesContent":["/// <reference types=\"mocha\" />\r\n\r\nimport * as sinonType from 'sinon';\r\nlet sinon: typeof sinonType;\r\nif (typeof UNIT_TEST === 'undefined') { // Do this to trick karma into not trying to load sinon\r\n  sinon = require<typeof sinonType>('sinon');\r\n}\r\n\r\nimport { expect, should } from 'chai';\r\nimport BaseURL from './../BaseURL';\r\nimport URLSearchParams from './../URLSearchParams';\r\n\r\nimport * as urlStateMachine from 'url-state-machine';\r\nlet usm: typeof urlStateMachine;\r\nif (typeof UNIT_TEST === 'undefined') { // Do this to trick karma into not trying to evaluate url-state-machine\r\n  usm = require<typeof urlStateMachine>('whatwg-url/lib/url-state-machine');\r\n}\r\n\r\nexport interface IConstructableUrl {\r\n  new(url: string, base?: string);\r\n}\r\n\r\nfunction conditionalIt(ignoreCompleteOnly: boolean, expectation: string, testFn: () => void): void {\r\n  if (!ignoreCompleteOnly) {\r\n    it(expectation, testFn);\r\n  }\r\n}\r\n\r\nfunction conditionalDescribe(ignoreCompleteOnly: boolean, description: string, testFn: () => void): void {\r\n  if (!ignoreCompleteOnly) {\r\n    describe(description, testFn);\r\n  }\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport function runUrlTests(ignoreCompleteOnlyTests: boolean, URLType: typeof BaseURL & IConstructableUrl): void {\r\n  let serializeURLSpy: sinon.SinonSpy;\r\n  beforeEach(() => {\r\n    if (typeof UNIT_TEST === 'undefined') {\r\n      serializeURLSpy = sinon.spy(usm, 'serializeURL');\r\n    }\r\n  });\r\n\r\n  afterEach(() => {\r\n    if (typeof UNIT_TEST === 'undefined') {\r\n      serializeURLSpy.restore();\r\n    }\r\n  });\r\n\r\n  describe('createObjectURL', () => {\r\n    it('should be defined', () => {\r\n      expect(URLType.createObjectURL).not.to.be.undefined;\r\n    });\r\n  });\r\n\r\n  describe('revokeObjectURL', () => {\r\n    it('should be defined', () => {\r\n      expect(URLType.revokeObjectURL).not.to.be.undefined;\r\n    });\r\n  });\r\n\r\n  describe('URL constructor', () => {\r\n    it('does not throw with a valid URL', () => {\r\n      should().not.throw(() => {\r\n        new URLType('http://contoso.com');\r\n      });\r\n    });\r\n\r\n    it('throws with an invalid URL', () => {\r\n      (() => {\r\n        new URLType('://contoso.com');\r\n      }).should.Throw('Invalid URL');\r\n\r\n      (() => {\r\n        new URLType('?contoso.com');\r\n      }).should.Throw('Invalid URL');\r\n\r\n      (() => {\r\n        new URLType('/contoso');\r\n      }).should.Throw('Invalid URL');\r\n    });\r\n\r\n    conditionalIt(ignoreCompleteOnlyTests, 'does not throw with a valid base URL', () => {\r\n      should().not.throw(() => {\r\n        new URLType('path/to/something', 'http://fabrikam.com');\r\n      });\r\n\r\n      should().not.throw(() => {\r\n        new URLType('http://contoso.com/path/to/something', 'http://fabrikam.com');\r\n      });\r\n    });\r\n\r\n    conditionalIt(ignoreCompleteOnlyTests, 'throws with an invalid base URL', () => {\r\n      (() => {\r\n        new URLType('path/to/something', '://fabrikam.com');\r\n      }).should.Throw('Invalid base URL');\r\n\r\n      (() => {\r\n        new URLType('http://contoso.com/path/to/something', '://fabrikam.com');\r\n      }).should.Throw('Invalid base URL');\r\n\r\n      (() => {\r\n        new URLType('path/to/something', '?fabrikam.com');\r\n      }).should.Throw('Invalid base URL');\r\n\r\n      (() => {\r\n        new URLType('http://contoso.com/path/to/something', '?fabrikam.com');\r\n      }).should.Throw('Invalid base URL');\r\n\r\n      (() => {\r\n        new URLType('path/to/something', '/fabrikam.com');\r\n      }).should.Throw('Invalid base URL');\r\n\r\n      (() => {\r\n        new URLType('http://contoso.com/path/to/something', '/fabrikam.com');\r\n      }).should.Throw('Invalid base URL');\r\n    });\r\n\r\n    it('supports IRI characters', () => {\r\n      const url: BaseURL =\r\n        new URLType('http://中文Türkçe.com/中文Türkçe?中文Türkçe=中文Türkçe#中文Türkçe');\r\n      expect(url.toJson()).to.equal('http://xn--trke-2oa7j0721dobrb.com/%E4%B8%AD%E6%96%87T%C3%BCrk%C3%A7e?%E4%B8%AD%E6%96%87T%C3%BCrk%C3%A7e=%E4%B8%AD%E6%96%87T%C3%BCrk%C3%A7e#%E4%B8%AD%E6%96%87T%C3%BCrk%C3%A7e'); // tslint:disable-line:max-line-length\r\n    });\r\n  });\r\n\r\n  describe('href', () => {\r\n    describe('getter', () => {\r\n      it('re-serializes a simple URL', () => {\r\n        const testUrl: string = 'http://www.contoso.com/';\r\n        const url: BaseURL = new URLType(testUrl);\r\n\r\n        expect(url.href).to.equal(testUrl);\r\n      });\r\n\r\n      it('re-serializes a complex URL', () => {\r\n        const testUrl: string = 'http://www.contoso.com:8080/path/to/stuff?query=foobarbaz&search=#hash=stuff';\r\n        const url: BaseURL = new URLType(testUrl);\r\n\r\n        expect(url.href).to.equal(testUrl);\r\n      });\r\n\r\n      it('re-serializes a very complex URL', () => {\r\n        const testUrl: string =\r\n          'http://username:password@www.contoso.com:8080/path/to/stuff?query=foobarbaz&search=#hash=stuff';\r\n        const url: BaseURL = new URLType(testUrl);\r\n\r\n        expect(url.href).to.equal(testUrl);\r\n      });\r\n\r\n      conditionalIt(ignoreCompleteOnlyTests, 're-serializes a relative URL with a base URL', () => {\r\n        const url: BaseURL =\r\n          new URLType('path/to/stuff?query=foobar&search=#hash=stuff', 'http://www.contoso.com:8080');\r\n        expect(url.href).to.equal('http://www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff');\r\n      });\r\n\r\n      conditionalIt(ignoreCompleteOnlyTests, 're-serializes an absolute URL with a base URL', () => {\r\n        const url: BaseURL = new URLType(\r\n          'http://fabrikam.com/path/to/stuff?query=foobar&search=#hash=stuff',\r\n          'http://www.contoso.com:8080'\r\n        );\r\n        expect(url.href).to.equal('http://fabrikam.com/path/to/stuff?query=foobar&search=#hash=stuff');\r\n      });\r\n\r\n      it('doesn\\'t re-serialize a URL that doesn\\'t change between calls to href', () => {\r\n        const testUrl: string = 'http://www.contoso.com/';\r\n        const url: BaseURL = new URLType(testUrl);\r\n\r\n        expect(url.href).to.equal(testUrl);\r\n        expect(url.href).to.equal(testUrl);\r\n        if (!ignoreCompleteOnlyTests) {\r\n          expect(serializeURLSpy.calledOnce).to.be.true;\r\n        }\r\n      });\r\n\r\n      it('appends a trailing slash to a URL constructed without one', () => {\r\n        const url: BaseURL = new URLType('http://www.contoso.com');\r\n        expect(url.href).to.equal('http://www.contoso.com/');\r\n      });\r\n    });\r\n\r\n    describe('setter', () => {\r\n      it('updates the URL with a simple URL', () => {\r\n        const url: BaseURL = new URLType('http://www.fabrikam.com/');\r\n\r\n        const testUrl: string = 'http://www.contoso.com/';\r\n        url.href = testUrl;\r\n\r\n        expect(url.href).to.equal(testUrl);\r\n      });\r\n\r\n      it('updates the URL with a complex URL', () => {\r\n        const url: BaseURL = new URLType('http://www.fabrikam.com/');\r\n\r\n        const testUrl: string = 'http://www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff';\r\n        url.href = testUrl;\r\n\r\n        expect(url.href).to.equal(testUrl);\r\n      });\r\n\r\n      it('updates the URL with a very complex URL', () => {\r\n        const url: BaseURL = new URLType('http://www.fabrikam.com/');\r\n\r\n        const testUrl: string =\r\n          'http://username:password@www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff';\r\n        url.href = testUrl;\r\n\r\n        expect(url.href).to.equal(testUrl);\r\n      });\r\n\r\n      it('throws if href is set with an invalid URL', () => {\r\n        const url: BaseURL = new URLType('http://www.fabrikam.com/');\r\n        (() => {\r\n          url.href = '://contoso.com';\r\n        }).should.throw('Invalid URL');\r\n      });\r\n\r\n      it('does not update if href is set with an invalid URL', () => {\r\n        const testUrl: string = 'http://www.contoso.com/';\r\n        const url: BaseURL = new URLType(testUrl);\r\n\r\n        try {\r\n          url.href = '://contoso.com';\r\n        } catch (e) { /* no-op */ }\r\n\r\n        expect(url.href).to.equal(testUrl);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('toJson', () => {\r\n    it('re-serializes a simple URL', () => {\r\n      const testUrl: string = 'http://www.contoso.com/';\r\n      const url: BaseURL = new URLType(testUrl);\r\n\r\n      expect((url as BaseURL).toJson()).to.equal(testUrl);\r\n    });\r\n\r\n    it('re-serializes a complex URL', () => {\r\n      const testUrl: string = 'http://www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff';\r\n      const url: BaseURL = new URLType(testUrl);\r\n\r\n      expect(url.toJson()).to.equal(testUrl);\r\n    });\r\n\r\n    it('re-serializes a very complex URL', () => {\r\n      const testUrl: string =\r\n        'http://username:password@www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff';\r\n      const url: BaseURL = new URLType(testUrl);\r\n\r\n      expect(url.toJson()).to.equal(testUrl);\r\n    });\r\n\r\n    conditionalIt(ignoreCompleteOnlyTests, 're-serializes a relative URL with a base URL', () => {\r\n      const url: BaseURL =\r\n        new URLType('path/to/stuff?query=foobar&search=#hash=stuff', 'http://www.contoso.com:8080');\r\n      expect(url.toJson()).to.equal('http://www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff');\r\n    });\r\n\r\n    conditionalIt(ignoreCompleteOnlyTests, 're-serializes an absolute URL with a base URL', () => {\r\n      const url: BaseURL = new URLType(\r\n        'http://fabrikam.com/path/to/stuff?query=foobar&search=#hash=stuff',\r\n        'http://www.contoso.com:8080'\r\n      );\r\n      expect(url.toJson()).to.equal('http://fabrikam.com/path/to/stuff?query=foobar&search=#hash=stuff');\r\n    });\r\n\r\n    it('doesn\\'t re-serialize a URL that doesn\\'t change between calls to toJson()', () => {\r\n      const testUrl: string = 'http://www.contoso.com/';\r\n      const url: BaseURL = new URLType(testUrl);\r\n\r\n      expect(url.toJson()).to.equal(testUrl);\r\n      expect(url.toJson()).to.equal(testUrl);\r\n      if (!ignoreCompleteOnlyTests) {\r\n        expect(serializeURLSpy.calledOnce).to.be.true;\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('origin', () => {\r\n    it('gets the origin from a very simple URL', () => {\r\n      const url: BaseURL = new URLType('http://contoso');\r\n      expect(url.origin).to.equal('http://contoso');\r\n    });\r\n\r\n    it('gets the origin from a simple URL', () => {\r\n      const url: BaseURL = new URLType('http://www.contoso.com/');\r\n      expect(url.origin).to.equal('http://www.contoso.com');\r\n    });\r\n\r\n    it('gets the origin from a complex URL', () => {\r\n      const url: BaseURL = new URLType('http://www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff');\r\n      expect(url.origin).to.equal('http://www.contoso.com:8080');\r\n    });\r\n\r\n    it('gets the origin from a very complex URL', () => {\r\n      const url: BaseURL = new URLType(\r\n        'http://username:password@www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff'\r\n      );\r\n      expect(url.origin).to.equal('http://www.contoso.com:8080');\r\n    });\r\n\r\n    conditionalIt(ignoreCompleteOnlyTests, 'gets the origin from a relative URL with a base URL', () => {\r\n      const url: BaseURL =\r\n        new URLType('path/to/stuff?query=foobar&search=#hash=stuff', 'http://www.contoso.com:8080');\r\n      expect(url.origin).to.equal('http://www.contoso.com:8080');\r\n    });\r\n\r\n    conditionalIt(ignoreCompleteOnlyTests, 'gets the origin from an absolute URL with a base URL', () => {\r\n      const url: BaseURL = new URLType(\r\n        'http://fabrikam.com/path/to/stuff?query=foobar&search=#hash=stuff',\r\n        'http://www.contoso.com:8080'\r\n      );\r\n      expect(url.origin).to.equal('http://fabrikam.com');\r\n    });\r\n  });\r\n\r\n  describe('protocol', () => {\r\n    describe('getter', () => {\r\n      it('gets the protocol from a very simple URL', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        expect(url.protocol).to.equal('http:');\r\n      });\r\n\r\n      it('gets the protocol from a simple URL', () => {\r\n        const url: BaseURL = new URLType('http://www.contoso.com/');\r\n        expect(url.protocol).to.equal('http:');\r\n      });\r\n\r\n      it('gets the protocol from a complex URL', () => {\r\n        const url: BaseURL =\r\n          new URLType('https://www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff');\r\n        expect(url.protocol).to.equal('https:');\r\n      });\r\n\r\n      it('gets the protocol from a very complex URL', () => {\r\n        const url: BaseURL = new URLType(\r\n          'sftp://username:password@www.contoso.com:8080/path/to/stuff?query=foobar&search=#hash=stuff'\r\n        );\r\n        expect(url.protocol).to.equal('sftp:');\r\n      });\r\n\r\n      it('supports the \"file:\" protocol', () => {\r\n        const url: BaseURL = new URLType('file:///C:/users/me/');\r\n        expect(url.protocol).to.equal('file:');\r\n      });\r\n\r\n      it('does not imply the \"file:\" scheme for URLs that look like Windows paths', () => {\r\n        const url: BaseURL = new URLType('C:\\\\users\\\\me\\\\');\r\n        expect(url.protocol).to.not.equal('file:');\r\n        expect(url.protocol).to.equal('c:');\r\n      });\r\n\r\n      conditionalIt(ignoreCompleteOnlyTests, 'gets the protocol from a relative URL with a base URL', () => {\r\n        const url: BaseURL =\r\n          new URLType('path/to/stuff?query=foobar&search=#hash=stuff', 'https://www.contoso.com:8080');\r\n        expect(url.protocol).to.equal('https:');\r\n      });\r\n\r\n      conditionalIt(ignoreCompleteOnlyTests, 'gets the protocol from an absolute URL with a base URL', () => {\r\n        const url: BaseURL = new URLType(\r\n          'http://fabrikam.com/path/to/stuff?query=foobar&search=#hash=stuff',\r\n          'https://www.contoso.com:8080'\r\n        );\r\n        expect(url.protocol).to.equal('http:');\r\n      });\r\n    });\r\n\r\n    describe('setter', () => {\r\n      it('sets the protocol without a trailing :', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.protocol = 'https';\r\n        expect(url.protocol).to.equal('https:');\r\n      });\r\n\r\n      it('sets the protocol with a trailing :', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.protocol = 'https:';\r\n        expect(url.protocol).to.equal('https:');\r\n      });\r\n\r\n      it('updates the href correctly', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.protocol = 'https';\r\n        expect(url.href).to.equal('https://contoso/');\r\n      });\r\n\r\n      it('does not update the protocol if set with an invalid protocol', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.protocol = 'x:x';\r\n        expect(url.href).to.equal('http://contoso/');\r\n      });\r\n    });\r\n  });\r\n\r\n  conditionalDescribe(ignoreCompleteOnlyTests, 'username', () => {\r\n    describe('getter', () => {\r\n      it('gets a missing username as an empty string', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        expect(url.username).to.be.empty;\r\n      });\r\n\r\n      it('gets a username', () => {\r\n        const url: BaseURL = new URLType('http://user@contoso');\r\n        expect(url.username).to.equal('user');\r\n      });\r\n\r\n      it('does not decode the username', () => {\r\n        const url: BaseURL = new URLType('http://user%20name@contoso');\r\n        expect(url.username).to.equal('user%20name');\r\n      });\r\n    });\r\n\r\n    describe('setter', () => {\r\n      it('sets the username on a URL without a username or password', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.username = 'user';\r\n        expect(url.username).to.equal('user');\r\n      });\r\n\r\n      it('sets the username on a URL with just a password', () => {\r\n        const url: BaseURL = new URLType('http://:password@contoso');\r\n        url.username = 'user';\r\n        expect(url.username).to.equal('user');\r\n      });\r\n\r\n      it('clears the username when username is set to an empty string', () => {\r\n        const url: BaseURL = new URLType('http://user@contoso');\r\n        url.username = '';\r\n        expect(url.username).to.be.empty;\r\n      });\r\n\r\n      it('updates the username on a URL with an existing username', () => {\r\n        const url: BaseURL = new URLType('http://user1@contoso');\r\n        url.username = 'user2';\r\n        expect(url.username).to.equal('user2');\r\n      });\r\n\r\n      it('does not set a username on a URL that does not support a username', () => {\r\n        const url: BaseURL = new URLType('file://contoso');\r\n        url.username = 'user';\r\n        expect(url.username).to.be.empty;\r\n      });\r\n\r\n      it('updates the href correctly', () => {\r\n        const url: BaseURL = new URLType('http://user1@contoso');\r\n        url.username = 'user2';\r\n        expect(url.href).to.equal('http://user2@contoso/');\r\n      });\r\n    });\r\n  });\r\n\r\n  conditionalDescribe(ignoreCompleteOnlyTests, 'password', () => {\r\n    describe('getter', () => {\r\n      it('gets a missing password as an empty string', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        expect(url.password).to.be.empty;\r\n      });\r\n\r\n      it('gets a password URL with a username and a password', () => {\r\n        const url: BaseURL = new URLType('http://user:password@contoso');\r\n        expect(url.password).to.equal('password');\r\n      });\r\n\r\n      it('gets a password URL with just a password', () => {\r\n        const url: BaseURL = new URLType('http://:password@contoso');\r\n        expect(url.password).to.equal('password');\r\n      });\r\n\r\n      it('does not decode the password', () => {\r\n        const url: BaseURL = new URLType('http://:pass%20word@contoso');\r\n        expect(url.password).to.equal('pass%20word');\r\n      });\r\n    });\r\n\r\n    describe('setter', () => {\r\n      it('sets the password on a URL without a username or password', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.password = 'password';\r\n        expect(url.password).to.equal('password');\r\n      });\r\n\r\n      it('clears the password when password is set to an empty string', () => {\r\n        const url: BaseURL = new URLType('http://:password@contoso');\r\n        url.password = '';\r\n        expect(url.password).to.be.empty;\r\n      });\r\n\r\n      it('updates the password on a URL with an existing password', () => {\r\n        const url: BaseURL = new URLType('http://:password1@contoso');\r\n        url.password = 'password2';\r\n        expect(url.password).to.equal('password2');\r\n      });\r\n\r\n      it('does not set a password on a URL that does not support a password', () => {\r\n        const url: BaseURL = new URLType('file://contoso');\r\n        url.password = 'password';\r\n        expect(url.password).to.be.empty;\r\n      });\r\n\r\n      it('updates the href correctly', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.password = 'password';\r\n        expect(url.href).to.equal('http://:password@contoso/');\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('host', () => {\r\n    describe('getter', () => {\r\n      it('gets the host without a port', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        expect(url.host).to.equal('contoso');\r\n      });\r\n\r\n      it('gets the host with a port', () => {\r\n        const url: BaseURL = new URLType('http://contoso:8080');\r\n        expect(url.host).to.equal('contoso:8080');\r\n      });\r\n\r\n      it('gets a missing host as an empty string', () => {\r\n        const url: BaseURL = new URLType('C:');\r\n        expect(url.host).to.be.empty;\r\n      });\r\n    });\r\n\r\n    describe('setter', () => {\r\n      it('sets the host', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.host = 'fabrikam';\r\n        expect(url.host).to.equal('fabrikam');\r\n      });\r\n\r\n      it('does not set the host on a URL that does not support a host', () => {\r\n        const url: BaseURL = new URLType('C:');\r\n        url.host = 'contoso';\r\n        expect(url.host).to.be.empty;\r\n      });\r\n\r\n      it('updates the href correctly', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.host = 'fabrikam';\r\n        expect(url.href).to.equal('http://fabrikam/');\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('hostname', () => {\r\n    describe('getter', () => {\r\n      it('gets the hostname without a port', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        expect(url.hostname).to.equal('contoso');\r\n      });\r\n\r\n      it('gets the host with a port', () => {\r\n        const url: BaseURL = new URLType('http://contoso:8080');\r\n        expect(url.hostname).to.equal('contoso');\r\n      });\r\n\r\n      it('gets a missing hostname as an empty string', () => {\r\n        const url: BaseURL = new URLType('C:');\r\n        expect(url.hostname).to.be.empty;\r\n      });\r\n    });\r\n\r\n    describe('setter', () => {\r\n      it('sets the hostname', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.hostname = 'fabrikam';\r\n        expect(url.hostname).to.equal('fabrikam');\r\n      });\r\n\r\n      it('does not set the hostname on a URL that does not support a host', () => {\r\n        const url: BaseURL = new URLType('C:');\r\n        url.hostname = 'contoso';\r\n        expect(url.hostname).to.be.empty;\r\n      });\r\n\r\n      it('updates the href correctly', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.hostname = 'fabrikam';\r\n        expect(url.href).to.equal('http://fabrikam/');\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('port', () => {\r\n    describe('getter', () => {\r\n      it('gets the port', () => {\r\n        const url: BaseURL = new URLType('http://contoso:8080');\r\n        expect(url.port).to.equal('8080');\r\n      });\r\n\r\n      it('gets a missing port on a URL without a port', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        expect(url.port).to.be.empty;\r\n      });\r\n\r\n      it('gets a missing port on a URL that does not support ports', () => {\r\n        const url: BaseURL = new URLType('C:');\r\n        expect(url.port).to.be.empty;\r\n      });\r\n    });\r\n\r\n    describe('setter', () => {\r\n      it('sets the port on a URL without a port', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.port = '8080';\r\n        expect(url.port).to.equal('8080');\r\n      });\r\n\r\n      it('sets the port on a URL with a port', () => {\r\n        const url: BaseURL = new URLType('http://contoso:8080');\r\n        url.port = '8888';\r\n        expect(url.port).to.equal('8888');\r\n      });\r\n\r\n      it('clears the port', () => {\r\n        const url: BaseURL = new URLType('http://contoso:8080');\r\n        url.port = '';\r\n        expect(url.port).to.be.empty;\r\n      });\r\n\r\n      it('does not set the port on a URL that does not support a host', () => {\r\n        const url: BaseURL = new URLType('C:');\r\n        url.port = '8080';\r\n        expect(url.port).to.be.empty;\r\n      });\r\n\r\n      it('updates the href correctly', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.port = '8080';\r\n        expect(url.href).to.equal('http://contoso:8080/');\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('pathname', () => {\r\n    describe('getter', () => {\r\n      it('gets an empty path for a URL with no path', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        expect(url.pathname).to.be.equal('/');\r\n      });\r\n\r\n      it('gets a simple path', () => {\r\n        const url: BaseURL = new URLType('http://contoso/path');\r\n        expect(url.pathname).to.equal('/path');\r\n      });\r\n\r\n      it('gets a more complex path', () => {\r\n        const url: BaseURL = new URLType('http://contoso/path/to/resource.json');\r\n        expect(url.pathname).to.equal('/path/to/resource.json');\r\n      });\r\n\r\n      it('supports paths containing \".\"s', () => {\r\n        const url: BaseURL = new URLType('http://contoso/./path/./to/./resource.json');\r\n        expect(url.pathname).to.equal('/path/to/resource.json');\r\n      });\r\n\r\n      it('supports paths containing \"..\"s', () => {\r\n        const url: BaseURL = new URLType('http://contoso/path/../to/../resource.json');\r\n        expect(url.pathname).to.equal('/resource.json');\r\n      });\r\n\r\n      it('supports paths containing \"...\"s', () => {\r\n        const url: BaseURL = new URLType('http://contoso/path/../to/.../resource.json');\r\n        expect(url.pathname).to.equal('/to/.../resource.json');\r\n      });\r\n\r\n      it('supports paths containing extra slashes', () => {\r\n        const url1: BaseURL = new URLType('http://contoso/path//to//resource.json');\r\n        expect(url1.pathname).to.equal('/path//to//resource.json');\r\n\r\n        const url2: BaseURL = new URLType('http://contoso/path///to///resource.json//');\r\n        expect(url2.pathname).to.equal('/path///to///resource.json//');\r\n      });\r\n\r\n      it('supports paths containing encoded special characters', () => {\r\n        // %25=%  %2F=/  %3F=?  %3D==  %26=&  %23=#\r\n        const url: BaseURL = new URLType('http://contoso/(%25%2F%3F%3D%26%23)');\r\n        expect(url.pathname).to.equal('/(%25%2F%3F%3D%26%23)');\r\n      });\r\n\r\n      it('supports paths containing encoded slash characters', () => {\r\n        const url: BaseURL = new URLType('http://contoso/path%2Fto/my%2Fresource.json');\r\n        expect(url.pathname).to.equal('/path%2Fto/my%2Fresource.json');\r\n      });\r\n\r\n      it('gets the first part of the path for a URL that does not have a hostname', () => {\r\n        const url: BaseURL = new URLType('C:\\\\path');\r\n        if (ignoreCompleteOnlyTests) {\r\n          expect(url.pathname).to.equal('/path');\r\n        } else {\r\n          expect(url.pathname).to.equal('\\\\path');\r\n        }\r\n      });\r\n\r\n      it('supports the \"file:\" protocol', () => {\r\n        const url: BaseURL = new URLType('file:///C:/users/me/');\r\n        expect(url.pathname).to.equal('/C:/users/me/');\r\n      });\r\n    });\r\n\r\n    describe('setter', () => {\r\n      it('sets the path on a URL with no path', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.pathname = 'path/to/resource';\r\n        expect(url.pathname).to.equal('/path/to/resource');\r\n      });\r\n\r\n      it('sets the path on a URL with a path', () => {\r\n        const url: BaseURL = new URLType('http://contoso/index.html');\r\n        url.pathname = 'path/to/resource';\r\n        expect(url.pathname).to.equal('/path/to/resource');\r\n      });\r\n\r\n      it('clears the path on a URL with a path', () => {\r\n        const url: BaseURL = new URLType('http://contoso/index.html');\r\n        url.pathname = '';\r\n        expect(url.pathname).to.be.equal('/');\r\n      });\r\n\r\n      it('updates the path correctly when set to a path with a leading slash', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.pathname = '/path/to/resource';\r\n        expect(url.pathname).to.equal('/path/to/resource');\r\n      });\r\n\r\n      it('updates the path correctly when set to a path with a trailing slash', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.pathname = 'path/to/resource/';\r\n        expect(url.pathname).to.equal('/path/to/resource/');\r\n      });\r\n\r\n      it('accepts paths containing \".\"s', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.pathname = './path/./to/./resource.json';\r\n        expect(url.pathname).to.equal('/path/to/resource.json');\r\n      });\r\n\r\n      it('accepts paths containing \"..\"s', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.pathname = 'path/../to/../resource.json';\r\n        expect(url.pathname).to.equal('/resource.json');\r\n      });\r\n\r\n      it('accepts paths containing \"...\"s', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.pathname = 'path/../to/.../resource.json';\r\n        expect(url.pathname).to.equal('/to/.../resource.json');\r\n      });\r\n\r\n      it('accepts paths containing extra slashes', () => {\r\n        const url1: BaseURL = new URLType('http://contoso');\r\n        url1.pathname = 'path//to//resource.json';\r\n        expect(url1.pathname).to.equal('/path//to//resource.json');\r\n\r\n        const url2: BaseURL = new URLType('http://contoso');\r\n        url2.pathname = 'path///to///resource.json//';\r\n        expect(url2.pathname).to.equal('/path///to///resource.json//');\r\n      });\r\n\r\n      it('accepts paths containing encoded special characters', () => {\r\n        // %25=%  %2F=/  %3F=?  %3D==  %26=&  %23=#\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.pathname = '(%25%2F%3F%3D%26%23)';\r\n        if (ignoreCompleteOnlyTests) {\r\n          expect(url.pathname).to.equal('/(%2525%252F%253F%253D%2526%2523)');\r\n        } else {\r\n          expect(url.pathname).to.equal('/(%25%2F%3F%3D%26%23)');\r\n        }\r\n      });\r\n\r\n      it('accepts paths containing encoded slash characters', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.pathname = 'path%2Fto/my%2Fresource.json';\r\n        if (ignoreCompleteOnlyTests) {\r\n          expect(url.pathname).to.equal('/path%252Fto/my%252Fresource.json');\r\n        } else {\r\n          expect(url.pathname).to.equal('/path%2Fto/my%2Fresource.json');\r\n        }\r\n      });\r\n\r\n      it('accepts the href correctly', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.pathname = 'path/to/resource';\r\n        expect(url.href).to.equal('http://contoso/path/to/resource');\r\n      });\r\n\r\n      it('updates the path correctly when set to a path with a trailing slash', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.pathname = 'path/to/resource/';\r\n        expect(url.href).to.equal('http://contoso/path/to/resource/');\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('search', () => {\r\n    describe('getter', () => {\r\n      it('gets an empty querystring correctly', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        expect(url.search).to.be.empty;\r\n      });\r\n\r\n      it('gets an empty querystring from a source URL with a trailing ?', () => {\r\n        const url: BaseURL = new URLType('http://contoso?');\r\n        expect(url.search).to.be.empty;\r\n      });\r\n\r\n      it('gets a querystring correctly', () => {\r\n        const url: BaseURL = new URLType('http://contoso?query');\r\n        expect(url.search).to.equal('?query');\r\n      });\r\n\r\n      it('correctly parses a querystring with a \"?\" in it', () => {\r\n        const url: BaseURL = new URLType('http://contoso/a?a=?');\r\n        expect(url.search).to.equal('?a=?');\r\n      });\r\n\r\n      it('correctly parses a querystring with a \"/\" in it', () => {\r\n        const url: BaseURL = new URLType('http://contoso/a?ghi/jkl');\r\n        expect(url.search).to.equal('?ghi/jkl');\r\n      });\r\n    });\r\n\r\n    describe('setter', () => {\r\n      it('sets a querystring on a URL without one', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.search = 'query';\r\n        expect(url.search).to.equal('?query');\r\n      });\r\n\r\n      it('updates a querystring on a URL with an existing querystring one', () => {\r\n        const url: BaseURL = new URLType('http://contoso?search');\r\n        url.search = 'query';\r\n        expect(url.search).to.equal('?query');\r\n      });\r\n\r\n      it('supports setting the querystring with a value that has a leading ?', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.search = '?query';\r\n        expect(url.search).to.equal('?query');\r\n      });\r\n\r\n      it('clears the querystring when set to an empty string', () => {\r\n        const url: BaseURL = new URLType('http://contoso?query');\r\n        url.search = '';\r\n        expect(url.search).to.be.empty;\r\n      });\r\n\r\n      it('clears the querystring when set to ?', () => {\r\n        const url: BaseURL = new URLType('http://contoso?query');\r\n        url.search = '?';\r\n        expect(url.search).to.be.empty;\r\n      });\r\n\r\n      it('accepts a querystring containing a \"?\"', () => {\r\n        const url: BaseURL = new URLType('http://contoso?query');\r\n        url.search = 'a=?';\r\n        expect(url.search).to.equal('?a=?');\r\n      });\r\n\r\n      it('accepts a querystring containing \"/\"', () => {\r\n        const url: BaseURL = new URLType('http://contoso/a?query');\r\n        url.search = 'ghi/jkl';\r\n        expect(url.search).to.equal('?ghi/jkl');\r\n      });\r\n\r\n      it('updates the href correctly when the querystring is added', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.search = 'query';\r\n        expect(url.href).to.equal('http://contoso/?query');\r\n      });\r\n\r\n      it('updates the href correctly when the querystring is removed', () => {\r\n        const url: BaseURL = new URLType('http://contoso?query');\r\n        url.search = '';\r\n        expect(url.href).to.equal('http://contoso/');\r\n      });\r\n\r\n      it('updates the href correctly when the querystring is updated', () => {\r\n        const url: BaseURL = new URLType('http://contoso?query');\r\n        url.search = 'search';\r\n        expect(url.href).to.equal('http://contoso/?search');\r\n      });\r\n\r\n      it('updates the searchParams object', () => {\r\n        const url: BaseURL = new URLType('http://contoso?query');\r\n        const searchParams: URLSearchParams = url.searchParams;\r\n        url.search = 'abc=def';\r\n        expect(searchParams.toString()).to.equal('abc=def');\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('searchParams', () => {\r\n    it('returns a correct URLSearchParams object', () => {\r\n      const url: BaseURL = new URLType('http://contoso?a=b&c=d');\r\n      expect(url.searchParams.get('a')).to.equal('b');\r\n    });\r\n\r\n    it('always returns the same object', () => {\r\n      const url: BaseURL = new URLType('http://contoso?a=b&c=d');\r\n      const searchParams: URLSearchParams = url.searchParams;\r\n      expect(url.searchParams).to.equal(searchParams);\r\n      url.search = 'search';\r\n      expect(url.searchParams).to.equal(searchParams);\r\n    });\r\n  });\r\n\r\n  describe('hash', () => {\r\n    describe('getter', () => {\r\n      it('gets an empty fragment correctly', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        expect(url.hash).to.be.empty;\r\n      });\r\n\r\n      it('gets an empty fragment from a source URL with a trailing #', () => {\r\n        const url: BaseURL = new URLType('http://contoso#');\r\n        expect(url.hash).to.be.empty;\r\n      });\r\n\r\n      it('gets a fragment correctly', () => {\r\n        const url: BaseURL = new URLType('http://contoso#fragment');\r\n        expect(url.hash).to.equal('#fragment');\r\n      });\r\n\r\n      it('correctly parses a fragment with a \"?\" in it', () => {\r\n        const url: BaseURL = new URLType('http://contoso#a=?');\r\n        expect(url.hash).to.equal('#a=?');\r\n      });\r\n\r\n      it('correctly parses a fragment with a \"#\" in it', () => {\r\n        const url: BaseURL = new URLType('http://contoso#a=#');\r\n        expect(url.hash).to.equal('#a=#');\r\n      });\r\n    });\r\n\r\n    describe('setter', () => {\r\n      it('sets a fragment on a URL without one', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.hash = 'fragment';\r\n        expect(url.hash).to.equal('#fragment');\r\n      });\r\n\r\n      it('updates a fragment on a URL with an existing fragment one', () => {\r\n        const url: BaseURL = new URLType('http://contoso#hash');\r\n        url.hash = 'fragment';\r\n        expect(url.hash).to.equal('#fragment');\r\n      });\r\n\r\n      it('supports setting the fragment with a value that has a leading #', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.hash = '#fragment';\r\n        expect(url.hash).to.equal('#fragment');\r\n      });\r\n\r\n      it('clears the fragment when set to an empty string', () => {\r\n        const url: BaseURL = new URLType('http://contoso#fragment');\r\n        url.hash = '';\r\n        expect(url.hash).to.be.empty;\r\n      });\r\n\r\n      it('clears the fragment when set to #', () => {\r\n        const url: BaseURL = new URLType('http://contoso#fragment');\r\n        url.hash = '#';\r\n        expect(url.hash).to.be.empty;\r\n      });\r\n\r\n      it('accepts a fragment containing a \"?\"', () => {\r\n        const url: BaseURL = new URLType('http://contoso#fragment');\r\n        url.hash = 'a=?';\r\n        expect(url.hash).to.equal('#a=?');\r\n      });\r\n\r\n      it('accepts a fragment containing a \"#\"', () => {\r\n        const url: BaseURL = new URLType('http://contoso#fragment');\r\n        url.hash = 'a=#';\r\n        expect(url.hash).to.equal('#a=#');\r\n      });\r\n\r\n      it('accepts a fragment containing \"/\"', () => {\r\n        const url: BaseURL = new URLType('http://contoso/a#fragment');\r\n        url.hash = 'abc?def&ghi=jkl/mno';\r\n        expect(url.hash).to.equal('#abc?def&ghi=jkl/mno');\r\n      });\r\n\r\n      it('updates the href correctly when the fragment is added', () => {\r\n        const url: BaseURL = new URLType('http://contoso');\r\n        url.hash = 'fragment';\r\n        expect(url.href).to.equal('http://contoso/#fragment');\r\n      });\r\n\r\n      it('updates the href correctly when the fragment is removed', () => {\r\n        const url: BaseURL = new URLType('http://contoso#fragment');\r\n        url.hash = '';\r\n        expect(url.href).to.equal('http://contoso/');\r\n      });\r\n\r\n      it('updates the href correctly when the fragment is updated', () => {\r\n        const url: BaseURL = new URLType('http://contoso#fragment');\r\n        url.hash = 'hash';\r\n        expect(url.href).to.equal('http://contoso/#hash');\r\n      });\r\n    });\r\n  });\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}