"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PlaceholderManager_1 = require("./PlaceholderManager");
var Placeholder_1 = require("./Placeholder");
var PlaceholderCollection = (function () {
    function PlaceholderCollection(serviceScope) {
        var _this = this;
        this._placeholders = undefined;
        serviceScope.whenFinished(function () {
            _this._placeholderManager = serviceScope.consume(PlaceholderManager_1.default.serviceKey);
        });
    }
    PlaceholderCollection.prototype.tryAttach = function (name, options) {
        if (!this._tryInitialize() || !this._placeholders.has(name)) {
            return undefined;
        }
        var placeholder = this._placeholders.get(name);
        if (!placeholder) {
            throw new Error('PlaceHolder dictionary has only the key but not the value for the placeholder');
        }
        var isAttached = placeholder._tryAttach(options);
        if (!isAttached) {
            throw new Error('Trying to attach the placeholder twice before being disposed. This is not allowed.');
        }
        return placeholder;
    };
    Object.defineProperty(PlaceholderCollection.prototype, "placeholderNames", {
        get: function () {
            if (!this._tryInitialize()) {
                return [];
            }
            var array = [];
            var iterator = this._placeholders.keys();
            for (var result = iterator.next(); !result.done; result = iterator.next()) {
                array.push(result.value);
            }
            return array;
        },
        enumerable: true,
        configurable: true
    });
    PlaceholderCollection.prototype._tryInitialize = function () {
        if (this._placeholders) {
            return true;
        }
        if (this._placeholderManager && this._placeholderManager.definitions) {
            this._placeholders = new Map();
            for (var _i = 0, _a = this._placeholderManager.definitions; _i < _a.length; _i++) {
                var definition = _a[_i];
                var placeholder = new Placeholder_1.default(definition);
                this._placeholders.set(definition.name, placeholder);
            }
            return true;
        }
        return false;
    };
    return PlaceholderCollection;
}());
exports.default = PlaceholderCollection;
