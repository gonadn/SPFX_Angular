import { IPlaceholderAttachOptions } from './PlaceholderCollection';
/**
 * Constuctor parameters for Placeholder.
 *
 * @internal
 */
export interface IPlaceholderDefinition {
    /**
     * The placeholder name.
     */
    readonly name: string;
    /**
     * The application's DOM element. The placeholder will be attached as
     * a child of a child of this element.
     */
    readonly domElement: HTMLDivElement;
}
/**
 * [BETA]
 * A content placeholder is a designated region on the page (i.e. empty HTML "div" element)
 * where third party extensions can inject HTML content.
 *
 * @beta
 */
export default class Placeholder {
    private static _logSource;
    private _name;
    private _parentElement;
    private _domElement;
    private _disposeHandler;
    /**
     * @internal
     */
    constructor(definition: IPlaceholderDefinition);
    /**
     * A symbolic name used to identify the placeholder.
     * Example: "PageHeader"
     *
     * @remarks
     * This is not an HTML element id. This is a logical name to represent a placeholder container.
     * Third party code must NOT make assumptions about the DOM structure of a page.
     */
    readonly name: string;
    /**
     * The HTML element on which the placeholder will be attached.  This property
     * is undefined if PlaceHolderCollection.tryAttach() was not been called, or if dispose() was
     * called after the last call to PlaceHolderCollection.tryAttach().
     */
    readonly domElement: HTMLDivElement;
    /**
     * Try to attach the placeholder element. If it was already attached, return false.
     *
     * @remarks
     * This DOM element belongs to the third party and may be used until it is disposed.
     * Once the PlaceHolderCollection.tryAttach() function has been called, it may not be
     * called again unless dispose() is called first.
     *
     * @internal
     */
    _tryAttach(options: IPlaceholderAttachOptions): boolean;
    /**
     * Diposes the attached DOM tree.
     *
     * @remarks
     * This method can be called to immediately dispose the attached DOM element. Otherwise, it
     * will be disposed by the application when the placeholder is disposed.  Calling dispose()
     * invokes the IPlaceholderAttachOptions.onDispose() callback, removes the attached DOM element
     * from the DOM, and assigns DOM element to undefined.
     */
    dispose(): void;
}
