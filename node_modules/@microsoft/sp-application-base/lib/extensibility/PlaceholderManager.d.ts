import { ServiceScope, ServiceKey } from '@microsoft/sp-core-library';
import { IPlaceholderDefinition } from './Placeholder';
/**
 * PlaceholderManager is a service registered with the application's root ServiceScope.
 * The host application uses this object to define the placeholders which will
 * be consumed by third party extensions.  The PlaceholderCollection then obtains its
 * data from the PlaceholderManager.
 *
 * @internal
 */
export default class PlaceholderManager {
    /**
     * The service key for PlaceholderManager.
     */
    static readonly serviceKey: ServiceKey<PlaceholderManager>;
    /**
     * The DOM attribute on a placeholder div.
     * e.g. <div data-sp-placeholder='PageHeader'>
     */
    private static readonly placeholderAttributeName;
    /**
     * The promise is resolved when placeholder definitions are ready.
     * Only after that, can the placeholders be loaded.
     */
    readonly definitionsReadyPromise: Promise<void>;
    private _definitions;
    private _resolveCallback;
    constructor(serviceScope: ServiceScope);
    /**
     * Register the placeholders in the current page.
     */
    registerPlaceholders(): void;
    /**
     * Initializes the collection of placeholders for use by application customizers.
     *
     * @remarks
     * We don't have a mechanism yet for notifying when the placeholder definitions change,
     * so under the current design, the application must call this function *exactly once*.
     * Rendering of application customizers will WAIT until definePlaceholders() has been called.
     */
    initializePlaceholders(definitions: IPlaceholderDefinition[]): void;
    /**
     * Returns undefined if definePlaceholders() was not called yet.
     */
    readonly definitions: IPlaceholderDefinition[] | undefined;
}
