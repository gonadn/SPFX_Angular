import { ServiceScope } from '@microsoft/sp-core-library';
import Placeholder from './Placeholder';
/**
 * [BETA]
 * Options for the PlaceholderCollection.tryAttach() method.
 *
 * @beta
 */
export interface IPlaceholderAttachOptions {
    /**
     * An event handler that will be invoked when the Placeholder.dispose() is called.
     */
    onDispose?: (placeholder: Placeholder) => void;
}
/**
 * [BETA]
 * Exposes a collection of content placeholders for use by third parties.
 *
 * @beta
 */
export default class PlaceholderCollection {
    private _placeholders;
    private _placeholderManager;
    /**
     * @internal
     */
    constructor(serviceScope: ServiceScope);
    /**
     * Searches for a content placeholder with the specified name. If none is found,
     * then the function returns undefined. If one is found, we try to attach to it.
     * If the caller tries to re-attached a placeholder, an exception will be thrown.
     * A dispose has to happen before re-attach can happen.
     *
     * @param name - logical name of the placeholder. This name should not be confused with
     *  the DOM id or the attribute value of the placeholder.
     * @param options - placeholder options.
     *
     * @remarks
     * The host application makes no guarantees about the availability of a given placeholder.
     * In situations where an expected placeholder is not available, the third party extension
     * must handle it gracefully, e.g. by not rendering anything, or by choosing an alternative
     * placeholder.
     */
    tryAttach(name: string, options?: IPlaceholderAttachOptions): Placeholder | undefined;
    /**
     * Returns the names of the currently available placeholders.
     */
    readonly placeholderNames: ReadonlyArray<string>;
    /**
     * This function is called by each member function to check whether this._placeholderManager.definitions
     * has been initialized yet.  This is a temporary solution until proper event notifications are wired up.
     */
    private _tryInitialize();
}
