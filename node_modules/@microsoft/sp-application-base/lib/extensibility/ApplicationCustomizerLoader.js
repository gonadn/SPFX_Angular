"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_extension_base_1 = require("@microsoft/sp-extension-base");
var BaseApplicationCustomizer_1 = require("./BaseApplicationCustomizer");
var ApplicationCustomizerContext_1 = require("./ApplicationCustomizerContext");
var ClientSideCustomAction_1 = require("./ClientSideCustomAction");
var PlaceholderManager_1 = require("./PlaceholderManager");
var ApplicationCustomizerLoader = (function () {
    function ApplicationCustomizerLoader(serviceScope, pageContext, spHttpClient, customActions) {
        var _this = this;
        this._customActionContext = new ClientSideCustomAction_1.ClientSideCustomActionContext();
        sp_core_library_1.Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        sp_core_library_1.Validate.isNotNullOrUndefined(pageContext, 'pageContext');
        sp_core_library_1.Validate.isNotNullOrUndefined(spHttpClient, 'spHttpClient');
        this._extensionManager = new sp_extension_base_1._ExtensionManager(serviceScope, BaseApplicationCustomizer_1.default);
        this._pageContext = pageContext;
        this._spHttpClient = spHttpClient;
        this._customActions = customActions ? customActions : [];
        for (var _i = 0, _a = this._customActions; _i < _a.length; _i++) {
            var customAction = _a[_i];
            if (customAction.location === ClientSideCustomAction_1.CustomActionLocations.APPLICATION_CUSTOMIZER) {
                var clientSideCustomAction = ClientSideCustomAction_1.default._tryCreateFromPreloadedCustomAction(customAction);
                if (clientSideCustomAction) {
                    this._customActionContext.customActions.push(clientSideCustomAction);
                }
            }
        }
        serviceScope.whenFinished(function () {
            _this._placeholderManager = serviceScope.consume(PlaceholderManager_1.default.serviceKey);
        });
    }
    ApplicationCustomizerLoader.prototype.loadExtensions = function () {
        this._parseCustomActionsQueryParameter();
        var customActions = this._customActionContext.getAll();
        for (var _i = 0, customActions_1 = customActions; _i < customActions_1.length; _i++) {
            var customAction = customActions_1[_i];
            if (customAction.location === ClientSideCustomAction_1.CustomActionLocations.APPLICATION_CUSTOMIZER) {
                this._createApplicationCustomizer(customAction);
            }
        }
    };
    ApplicationCustomizerLoader.prototype.notifyRendered = function () {
        this._extensionManager.waitForInitialization()
            .then(function (extensions) {
            for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {
                var extension = extensions_1[_i];
                try {
                    extension.onRender();
                }
                catch (error) {
                    var manifest = extension.context.manifest;
                    sp_telemetry_1._TraceLogger.logError(ApplicationCustomizerLoader._logSource, new Error("The onRender() API threw an exception for application customizer '" + manifest.alias + "'. Error information is '" + error.message + ".")); 
                }
            }
        });
    };
    ApplicationCustomizerLoader.prototype._createApplicationCustomizer = function (customAction) {
        this._extensionManager.createExtension(customAction.clientSideComponentId.toString(), customAction.clientSideComponentProperties, function (extensionContextParameters) {
            return new ApplicationCustomizerContext_1.default(extensionContextParameters, {});
        }).catch(function (error) {
            sp_telemetry_1._TraceLogger.logError(ApplicationCustomizerLoader._logSource, new Error("Failed to create application customizer '" + customAction.tag + "'. Error information is '" + error.message + "'.")); 
        });
    };
    ApplicationCustomizerLoader.prototype._parseCustomActionsQueryParameter = function () {
        var parameters = new sp_core_library_1.UrlQueryParameterCollection(window.location.href);
        var parameterValue = parameters.getValue('customActions');
        if (parameterValue) {
            try {
                var decodedParameterValue = decodeURIComponent(parameterValue);
                var queryValue = JSON.parse(decodedParameterValue);
                if (queryValue) {
                    for (var _i = 0, _a = Object.keys(queryValue); _i < _a.length; _i++) {
                        var key = _a[_i];
                        var clientSideComponentId = sp_core_library_1.Guid.tryParse(key);
                        var location_1 = queryValue[key].location;
                        var properties = queryValue[key].properties;
                        this._customActionContext.debugCustomActions.push(ClientSideCustomAction_1.default._tryCreateFromDebugData(location_1, clientSideComponentId, properties ? JSON.stringify(properties) : ''));
                    }
                }
            }
            catch (e) {
                sp_telemetry_1._TraceLogger.logError(ApplicationCustomizerLoader._logSource, new Error('Failed to parse the "customActions" URL query parameter:' + e.message));
                console.error('The "customActions" URL query parameter is improperly formatted: '
                    + decodeURIComponent(parameterValue));
            }
        }
    };
    return ApplicationCustomizerLoader;
}());
ApplicationCustomizerLoader._logSource = sp_telemetry_1._LogSource.create('ApplicationCustomizerLoader');
exports.default = ApplicationCustomizerLoader;
