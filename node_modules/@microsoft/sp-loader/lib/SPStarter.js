"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var StringsProxy_1 = require("@microsoft/sp-core-library/lib/StringsProxy");
var SPCoreLibraryStrings_resx_1 = require("./SPCoreLibraryStrings.resx");
StringsProxy_1.setStrings(SPCoreLibraryStrings_resx_1.default);
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var developerToolsLoader = require("./DeveloperTools/DeveloperToolsLoader");
var SPSystemJsComponentLoader_1 = require("./systemjs/SPSystemJsComponentLoader");
var SPRequireJsComponentLoader_1 = require("./requirejs/SPRequireJsComponentLoader");
var LocaleStore_1 = require("./stores/LocaleStore");
var BrowserSupport_1 = require("./utilities/BrowserSupport");
var showBrowserDevToolsWarning_1 = require("./DeveloperTools/BrowserDeveloperToolsWarning/showBrowserDevToolsWarning");
var SPLoader_resx_1 = require("./SPLoader.resx");
if (!DEBUG && !UNIT_TEST) {
    showBrowserDevToolsWarning_1.showBrowserDevToolsWarning();
}
var REQUIREJS_FLIGHT_ID = 125;
var SPStarter = (function () {
    function SPStarter() {
    }
    SPStarter._setBundledComponents = function (bundledComponents) {
        if (!SPStarter._bundledComponents) {
            SPStarter._bundledComponents = bundledComponents;
        }
        else {
            throw new Error('Bundled components can be only set once'); 
        }
    };
    SPStarter.start = function (preloadedData, handleFailure) {
        var handleError = function (error) {
            if (handleFailure) {
                handleFailure({
                    message: SPLoader_resx_1.default.loaderUserFriendlyError,
                    error: error
                });
            }
            return Promise.reject(error);
        };
        if (!preloadedData) {
            return handleError(new Error(SPLoader_resx_1.default.invalidPreloadedDataError));
        }
        if (!preloadedData.clientSideApplicationId) {
            return handleError(new Error(SPLoader_resx_1.default.missingApplicationIdError));
        }
        var browserCompatibility = SPStarter.getBrowserCompatibility();
        if (browserCompatibility.supportLevel === sp_core_library_1.BrowserSupportLevel.Blocked) {
            if (handleFailure) {
                handleFailure({
                    message: SPLoader_resx_1.default.browserNotSupportedError,
                    error: new Error(browserCompatibility.warning)
                });
            }
            return Promise.reject(new Error(SPLoader_resx_1.default.browserNotSupportedError));
        }
        if (preloadedData.spPageContextInfo) {
            sp_core_library_1.Log._initialize(new sp_telemetry_1._SPTelemetryLogHandler());
            SPStarter._initializeEnvironment();
            sp_core_library_1.Session._initialize({ applicationId: preloadedData.spPageContextInfo.CorrelationId });
            SPStarter._initializeTelemetry(preloadedData);
            var allowDebugQueryParameter = 'EDOG_Content' === preloadedData.spPageContextInfo.farmLabel
                || sp_core_library_1.Environment.type === sp_core_library_1.EnvironmentType.Local;
            sp_core_library_1._SPFlight.initialize(preloadedData.spPageContextInfo.ExpFeatures, allowDebugQueryParameter);
            sp_core_library_1._SPKillSwitch.initialize(preloadedData.spPageContextInfo.killSwitches, allowDebugQueryParameter);
            LocaleStore_1.default.setLocale(preloadedData.spPageContextInfo.currentUICultureName);
            sp_telemetry_1._PerformanceLogger.markSpLoaderStart();
        }
        var spLoader = require('./index');
        var componentLoader = sp_core_library_1._SPFlight.isEnabled(REQUIREJS_FLIGHT_ID) ?
            new SPRequireJsComponentLoader_1.default() :
            new SPSystemJsComponentLoader_1.default();
        return componentLoader._initialize(preloadedData, SPStarter._bundledComponents).then(function () {
            spLoader.SPComponentLoader.initialize(componentLoader);
            spLoader.DeveloperTools.initialize(developerToolsLoader);
            return spLoader.SPComponentLoader.start(preloadedData).then(function (application) {
                if (window['_spLoaderCallback']) {
                    var _spLoaderCallback = window['_spLoaderCallback'];
                    _spLoaderCallback(application);
                }
                return application;
            });
        }).catch(function (error) {
            return handleError(error);
        });
    };
    SPStarter.getBrowserCompatibility = function () {
        return BrowserSupport_1.default.getBrowserCompatibility();
    };
    SPStarter._initializeEnvironment = function () {
        var type;
        if (window.location.hostname === 'localhost' ||
            window['ENVIRONMENTTYPE'] &&
                window['ENVIRONMENTTYPE'] === 'Local') {
            type = sp_core_library_1.EnvironmentType.Local;
        }
        else {
            type = sp_core_library_1.EnvironmentType.SharePoint;
        }
        sp_core_library_1.Environment._initialize({ type: type });
    };
    SPStarter._initializeTelemetry = function (preloadedData) {
        if (SPStarter._isTelemetryDisabled()) {
            return;
        }
        var pageContextInfo = preloadedData.spPageContextInfo;
        sp_telemetry_1._Telemetry.initialize(preloadedData.manifests[0].alias, {
            environment: pageContextInfo.env,
            farmLabel: pageContextInfo.farmLabel,
            clientSideApplicationId: preloadedData.clientSideApplicationId,
            siteSubscriptionId: pageContextInfo.siteSubscriptionId,
            version: !!BUILD_NUMBER ? BUILD_NUMBER : preloadedData.manifests[0].version,
            loginName: pageContextInfo.userLoginName,
            systemUserKey: pageContextInfo.systemUserKey,
            currentUICultureName: pageContextInfo.currentUICultureName,
            correlationId: pageContextInfo.CorrelationId,
            enableConsoleLog: SPStarter._isConsoleLogEnabled()
        });
    };
    SPStarter._isQueryParameterTrue = function (name) {
        var parameterValue;
        try {
            var queryParams = new sp_core_library_1.UrlQueryParameterCollection(window.location.href);
            parameterValue = queryParams.getValue(name) === 'true';
        }
        catch (error) {
            parameterValue = false;
        }
        return parameterValue;
    };
    SPStarter._isConsoleLogEnabled = function () {
        return SPStarter._isQueryParameterTrue('enableConsoleLog');
    };
    SPStarter._isTelemetryDisabled = function () {
        return SPStarter._isQueryParameterTrue('disableTelemetry');
    };
    return SPStarter;
}());
SPStarter._bundledComponents = undefined;
exports.default = SPStarter;
