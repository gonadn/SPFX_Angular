import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import { IPreloadedData } from '../IPreloadedData';
import { ISPComponentLoader, ILoadScriptOptions } from '../ISPComponentLoader';
import { BaseComponentLoader } from '../BaseComponentLoader';
/**
 * The component loader for SPFx.
 * This implementation uses SystemJS as the internal module loader.
 *
 * @alpha
 */
export default class SPSystemJsComponentLoader extends BaseComponentLoader implements ISPComponentLoader {
    private _systemJsLoader;
    private _isInitialized;
    /**
     * @internal
     */
    constructor();
    /**
     * This is called by the page scripts to start loading the framework. Do not call it from your own code.
     */
    start<TApplication>(preloadedData: IPreloadedData): Promise<TApplication>;
    /**
     * Initializes the component loader.
     * Registers all manifests (including debug manifests, if it applies)
     * and sets up internal logic before allowing to load components.
     * @internal
     */
    _initialize(preloadedData: IPreloadedData, bundledComponents?: Map<string, Object> | undefined): Promise<void>;
    /**
     * Given a URL, load a script.
     *
     * @param url     - The script URL.
     * @param options - globalExportsName: If the script isn't an AMD module and loads a global member on the page,
     *                    specify the global member's name.
     * @returns         A promise containing the loaded module.
     */
    loadScript<TModule>(url: string, options?: ILoadScriptOptions): Promise<TModule>;
    /**
     * Loads a component from a manifest.
     *
     * @param manifest - Manifest of the module to load.
     * @returns          A promise containing the loaded module.
     */
    loadComponent<TComponent>(manifest: IClientSideComponentManifest): Promise<TComponent>;
}
