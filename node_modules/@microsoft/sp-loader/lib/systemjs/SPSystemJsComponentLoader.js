"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var SPApplicationLoader_1 = require("../SPApplicationLoader");
var SystemJsLoader_1 = require("./SystemJsLoader");
var ManifestStore_1 = require("../stores/ManifestStore");
var debugManifestProvider_1 = require("../debug/debugManifestProvider");
var componentConstants = require("../utilities/componentConstants");
var telemetryConstants = require("../utilities/telemetryConstants");
var BaseComponentLoader_1 = require("../BaseComponentLoader");
var loadComponent_1 = require("./loadComponent");
var ComponentOverrider_1 = require("./ComponentOverrider");
var SPLoader_resx_1 = require("../SPLoader.resx");
var SPSystemJsComponentLoader = (function (_super) {
    __extends(SPSystemJsComponentLoader, _super);
    function SPSystemJsComponentLoader() {
        var _this = _super.call(this) || this;
        _this._isInitialized = false;
        _this._systemJsLoader = SystemJsLoader_1.default.instance;
        return _this;
    }
    SPSystemJsComponentLoader.prototype.start = function (preloadedData) {
        return this._initialize(preloadedData).then(function () {
            return SPApplicationLoader_1.default.startApplication(preloadedData);
        }).catch(function (error) {
            sp_telemetry_1._TraceLogger.logError(telemetryConstants.startLogSource, error);
            throw error;
        });
    };
    SPSystemJsComponentLoader.prototype._initialize = function (preloadedData, bundledComponents) {
        if (bundledComponents === void 0) { bundledComponents = undefined; }
        if (this._isInitialized) {
            return Promise.resolve();
        }
        this._isInitialized = true;
        ManifestStore_1.default.instance.registerPreloadedManifests(preloadedData);
        if (preloadedData.clientSideApplicationId === 'b1ab4aaa-f779-405c-8683-d3a750b5d18d') {
            this._systemJsLoader._baseSystemConfig(SystemJsLoader_1.default.pluginName,  false);
        }
        if (NPM_BUILD) {
            require('./../utilities/initializeNpmModule').initializeNpmModule();
        }
        if (!bundledComponents) {
            ComponentOverrider_1.default.overrideComponent(componentConstants.spLoaderComponentId, require('./../index'));
            ComponentOverrider_1.default.overrideComponent(componentConstants.spCoreLibraryComponentId, require('@microsoft/sp-core-library'));
            ComponentOverrider_1.default.overrideComponent(componentConstants.spLodashSubsetComponentId, require('@microsoft/sp-lodash-subset'));
            ComponentOverrider_1.default.overrideComponent(componentConstants.odspUtilitiesBundleComponentId, require('@ms/odsp-utilities-bundle'));
            ComponentOverrider_1.default.overrideComponent(componentConstants.spTelemetryComponentId, require('@ms/sp-telemetry'));
        }
        else {
            ComponentOverrider_1.default.overrideComponent(componentConstants.spLoaderComponentId, require('../index'));
            bundledComponents.forEach(function (value, key) {
                ComponentOverrider_1.default.overrideComponent(key, value);
            });
        }
        return debugManifestProvider_1.loadDebugManifests(this).catch(function () {
        });
    };
    SPSystemJsComponentLoader.prototype.loadScript = function (url, options) {
        sp_core_library_1.Validate.isNonemptyString(url, 'url');
        if (typeof options === 'string') {
            var error = new Error(SPLoader_resx_1.default.loadScriptWithStringError);
            sp_telemetry_1._TraceLogger.logError(telemetryConstants.loadScriptLogSource, error);
            throw error;
        }
        var globalMetaConfig = {
            meta: {}
        };
        globalMetaConfig.meta[url] = {
            scriptLoad: false
        };
        if (options) {
            if (options.globalExportsName) {
                globalMetaConfig.meta[url] = {
                    format: 'global',
                    exports: options.globalExportsName
                };
            }
        }
        this._systemJsLoader.systemConfig(globalMetaConfig);
        return this._systemJsLoader.systemImport(url);
    };
    SPSystemJsComponentLoader.prototype.loadComponent = function (manifest) {
        return loadComponent_1.default(manifest);
    };
    return SPSystemJsComponentLoader;
}(BaseComponentLoader_1.BaseComponentLoader));
exports.default = SPSystemJsComponentLoader;
