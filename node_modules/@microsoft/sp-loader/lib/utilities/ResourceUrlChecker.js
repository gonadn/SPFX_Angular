"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var resolveAddress_1 = require("./resolveAddress");
var SPLoader_resx_1 = require("../SPLoader.resx");
var telemetryConstants = require("./telemetryConstants");
var UrlStatus;
(function (UrlStatus) {
    UrlStatus[UrlStatus["Undefined"] = 0] = "Undefined";
    UrlStatus[UrlStatus["OK"] = 1] = "OK";
    UrlStatus[UrlStatus["FileNotFound"] = 2] = "FileNotFound";
    UrlStatus[UrlStatus["Forbidden"] = 3] = "Forbidden";
    UrlStatus[UrlStatus["ClientError"] = 4] = "ClientError";
    UrlStatus[UrlStatus["ServerError"] = 5] = "ServerError";
    UrlStatus[UrlStatus["NetworkError"] = 6] = "NetworkError";
})(UrlStatus || (UrlStatus = {}));
var ResourceUrlChecker = (function () {
    function ResourceUrlChecker() {
    }
    ResourceUrlChecker.checkResourceUrl = function (manifest, name) {
        sp_core_library_1.Validate.isNotNullOrUndefined(manifest, 'manifest');
        sp_core_library_1.Validate.isNonemptyString(name, 'name');
        var url = resolveAddress_1.default(manifest, name);
        return ResourceUrlChecker._getUrlStatus(url).then(function (urlStatus) {
            if (urlStatus !== UrlStatus.OK) {
                return ResourceUrlChecker._throwUrlStatusError(urlStatus, manifest, name, url);
            }
            return Promise.resolve();
        });
    };
    ResourceUrlChecker._throwUrlStatusError = function (urlStatus, manifest, name, url) {
        var errorString = '';
        switch (urlStatus) {
            case UrlStatus.FileNotFound:
                if (url.match(ResourceUrlChecker.localhostUrlRegex)) {
                    errorString = sp_core_library_1.Text.format(SPLoader_resx_1.default.urlStatusLocalhostFileNotFoundError, manifest.id, manifest.alias, name, url); 
                }
                else {
                    errorString = sp_core_library_1.Text.format(SPLoader_resx_1.default.urlStatusFileNotFoundError, manifest.id, manifest.alias, name, url);
                }
                break;
            case UrlStatus.Forbidden:
                errorString = sp_core_library_1.Text.format(SPLoader_resx_1.default.urlStatusForbiddenError, manifest.id, manifest.alias, name, url);
                break;
            case UrlStatus.ClientError:
                errorString = sp_core_library_1.Text.format(SPLoader_resx_1.default.urlStatusClientErrorError, manifest.id, manifest.alias, name, url);
                break;
            case UrlStatus.ServerError:
                errorString = sp_core_library_1.Text.format(SPLoader_resx_1.default.urlStatusServerErrorError, manifest.id, manifest.alias, name, url);
                break;
            case UrlStatus.NetworkError:
                if (url.match(ResourceUrlChecker.localhostUrlRegex)) {
                    errorString = sp_core_library_1.Text.format(SPLoader_resx_1.default.urlStatusLocalhostNetworkErrorError, manifest.id, manifest.alias, name, url); 
                }
                else if (url.match(ResourceUrlChecker.httpsUrlRegex)) {
                    errorString = sp_core_library_1.Text.format(SPLoader_resx_1.default.urlStatusHttpsNetworkErrorError, manifest.id, manifest.alias, name, url);
                }
                else {
                    errorString = sp_core_library_1.Text.format(SPLoader_resx_1.default.urlStatusNetworkErrorError, manifest.id, manifest.alias, name, url);
                }
                break;
            case UrlStatus.Undefined:
            default:
                errorString = sp_core_library_1.Text.format(SPLoader_resx_1.default.urlStatusUndefinedError, manifest.id, manifest.alias, name, url);
        }
        var error = new Error(errorString);
        sp_telemetry_1._TraceLogger.logError(telemetryConstants.loadComponentLogSource, error);
        throw error;
    };
    ResourceUrlChecker._getUrlStatus = function (url) {
        var requestInit = {
            method: 'HEAD',
            mode: 'cors'
        };
        var request = new Request(url, requestInit);
        return window.fetch(request).then(function (response) {
            var httpStatusCode = response.status;
            if (httpStatusCode >= 200 && httpStatusCode < 300) {
                return UrlStatus.OK;
            }
            if (httpStatusCode === 404) {
                return UrlStatus.FileNotFound;
            }
            if (httpStatusCode === 403) {
                return UrlStatus.Forbidden;
            }
            if (httpStatusCode >= 400 && httpStatusCode < 500) {
                return UrlStatus.ClientError;
            }
            if (httpStatusCode >= 500 && httpStatusCode < 600) {
                return UrlStatus.ServerError;
            }
            return UrlStatus.Undefined;
        }).catch(function (error) {
            return UrlStatus.NetworkError;
        });
    };
    return ResourceUrlChecker;
}());
ResourceUrlChecker.localhostUrlRegex = /^http[s]?:\/\/localhost/;
ResourceUrlChecker.httpsUrlRegex = /^https:\/\//;
exports.default = ResourceUrlChecker;
