"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var test_1 = require("@microsoft/sp-core-library/lib/test");
var resolveAddress_1 = require("../resolveAddress");
var TestManifests_1 = require("../../test/data/TestManifests");
var LocaleStore_1 = require("../../stores/LocaleStore");
var sp_lodash_subset_1 = require("@microsoft/sp-lodash-subset");
describe('resolveAddress tests', function () {
    describe('Error cases', function () {
        it('throws with no manifest', function () {
            chai_1.assert.throw(function () { return resolveAddress_1.default(test_1.TEST_UNDEFINED, 'anyName'); });
        });
        it('throws with no resource name', function () {
            chai_1.assert.throw(function () { return resolveAddress_1.default(TestManifests_1.default.manifestWithPathDependency, test_1.TEST_UNDEFINED); });
        });
        it('throws with empty resource name', function () {
            chai_1.assert.throw(function () { return resolveAddress_1.default(TestManifests_1.default.manifestWithPathDependency, ''); });
        });
        it('throws with wrong resource name', function () {
            chai_1.assert.throw(function () { return resolveAddress_1.default(TestManifests_1.default.manifestWithPathDependency, 'notTheRightName'); });
        });
    });
    describe('Path / localizedPath dependency', function () {
        it('resolves path dependency', function () {
            var url = resolveAddress_1.default(TestManifests_1.default.manifestWithPathDependency, TestManifests_1.default.pathDependencyName);
            chai_1.assert.equal(url, TestManifests_1.default.pathDependencyFullUrl);
        });
        it('resolves localized path dependency with paths in en-US', function () {
            LocaleStore_1.default.setLocale('en-us');
            var url = resolveAddress_1.default(TestManifests_1.default.manifestWithLocalizedPathWithPathsDependency, TestManifests_1.default.localizedPathWithPathsDependencyName);
            chai_1.assert.equal(url, TestManifests_1.default.localizedPathWithPathsDependencyFullUrlEnUs);
        });
        it('resolves localized path dependency with paths in es-ES', function () {
            LocaleStore_1.default.setLocale('es-es');
            var url = resolveAddress_1.default(TestManifests_1.default.manifestWithLocalizedPathWithPathsDependency, TestManifests_1.default.localizedPathWithPathsDependencyName);
            chai_1.assert.equal(url, TestManifests_1.default.localizedPathWithPathsDependencyFullUrlEsEs);
        });
        it('resolves localized path dependency with default path', function () {
            var url = resolveAddress_1.default(TestManifests_1.default.manifestWithLocalizedPathDependency, TestManifests_1.default.localizedPathDependencyName);
            chai_1.assert.equal(url, TestManifests_1.default.localizedPathDependencyFullUrl);
        });
    });
    describe('Component dependency', function () {
        it('resolves component dependency with failover path', function () {
            var url = resolveAddress_1.default(TestManifests_1.default.manifestWithComponentDependencyWithFailoverPath, TestManifests_1.default.componentDependencyName);
            chai_1.assert.equal(url, TestManifests_1.default.failoverPath);
        });
        it('throws on component dependency without failover path', function () {
            chai_1.assert.throws(function () {
                resolveAddress_1.default(TestManifests_1.default.manifestWithComponentDependency, TestManifests_1.default.componentDependencyName);
            });
        });
    });
    describe('resolveAddress supports lower-case and upper-case', function () {
        describe('relative paths', function () {
            var manifest = sp_lodash_subset_1.cloneDeep(TestManifests_1.default.manifestWithPathDependency);
            var loaderConfig = manifest.loaderConfig;
            var moduleConfig = loaderConfig.scriptResources[TestManifests_1.default.pathDependencyName];
            var address = moduleConfig.path;
            beforeEach(function () {
                manifest = sp_lodash_subset_1.cloneDeep(TestManifests_1.default.manifestWithPathDependency);
                loaderConfig = manifest.loaderConfig;
                moduleConfig = loaderConfig.scriptResources[TestManifests_1.default.pathDependencyName];
                address = moduleConfig.path;
            });
            it('supports lower-case URL', function () {
                loaderConfig.internalModuleBaseUrls[0] = loaderConfig.internalModuleBaseUrls[0].toLowerCase();
                moduleConfig.path = address.toLowerCase();
                var url = resolveAddress_1.default(manifest, TestManifests_1.default.pathDependencyName);
                chai_1.assert.equal(url, TestManifests_1.default.pathDependencyFullUrl.toLowerCase());
            });
            it('supports upper-case URL', function () {
                loaderConfig.internalModuleBaseUrls[0] = loaderConfig.internalModuleBaseUrls[0].toUpperCase();
                moduleConfig.path = address.toUpperCase();
                var url = resolveAddress_1.default(manifest, TestManifests_1.default.pathDependencyName);
                chai_1.assert.equal(url, TestManifests_1.default.pathDependencyFullUrl.toUpperCase());
            });
            it('supports mixed URL', function () {
                loaderConfig.internalModuleBaseUrls[0] = loaderConfig.internalModuleBaseUrls[0].replace('http', 'hTTP');
                moduleConfig.path = address.replace('http', 'hTTP');
                var url = resolveAddress_1.default(manifest, TestManifests_1.default.pathDependencyName);
                chai_1.assert.equal(url, TestManifests_1.default.pathDependencyFullUrl.replace('http', 'hTTP'));
            });
        });
        describe('absolute paths', function () {
            var manifest = sp_lodash_subset_1.cloneDeep(TestManifests_1.default.manifestWithPathDependency);
            var moduleConfig = manifest.loaderConfig.scriptResources[TestManifests_1.default.pathDependencyName];
            beforeEach(function () {
                manifest = sp_lodash_subset_1.cloneDeep(TestManifests_1.default.manifestWithPathDependency);
                moduleConfig =
                    manifest.loaderConfig.scriptResources[TestManifests_1.default.pathDependencyName];
            });
            it('supports lower-case URL', function () {
                moduleConfig.path = TestManifests_1.default.pathDependencyFullUrl.toLowerCase();
                var url = resolveAddress_1.default(manifest, TestManifests_1.default.pathDependencyName);
                chai_1.assert.equal(url, TestManifests_1.default.pathDependencyFullUrl.toLowerCase());
            });
            it('supports upper-case URL', function () {
                moduleConfig.path = TestManifests_1.default.pathDependencyFullUrl.toUpperCase();
                var url = resolveAddress_1.default(manifest, TestManifests_1.default.pathDependencyName);
                chai_1.assert.equal(url, TestManifests_1.default.pathDependencyFullUrl.toUpperCase());
            });
            it('supports mixed URL', function () {
                moduleConfig.path = TestManifests_1.default.pathDependencyFullUrl.replace('http', 'hTTP');
                var url = resolveAddress_1.default(manifest, TestManifests_1.default.pathDependencyName);
                chai_1.assert.equal(url, TestManifests_1.default.pathDependencyFullUrl.replace('http', 'hTTP'));
            });
        });
    });
});
