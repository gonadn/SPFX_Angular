import { IBrowserCompatibility } from '@microsoft/sp-core-library';
import { IPreloadedData } from './IPreloadedData';
/**
 * Provides information about a loader error.
 * Used with handleError() in order to present UI friendly error information.
 * @internal
 */
export interface IErrorInformation {
    /**
     * User friendly message for the error.
     * It should not include technical details, but a way for the user to work around the problem.
     * An example of that: "Please refresh the page" or "Please update your browser to the last version"
     */
    message: string;
    /**
     * Original error.
     */
    error?: Error;
}
/**
 * Bootstrapper for the application
 * @internal
 */
export default class SPStarter {
    private static _bundledComponents;
    /**
     * Sets a map with the bundled components. These components will be added to the component loader
     * during initialization, so they won't need to be loaded afterwards.
     * The map is of the form componentId: string -> component: Object
     *
     * @internal
     */
    static _setBundledComponents(bundledComponents: Map<string, Object>): void;
    /**
     * This is called by the page scripts to start loading the framework. Do not call it from your own code.
     */
    static start<TApplication>(preloadedData: IPreloadedData, handleFailure?: (errorInformation: IErrorInformation) => void): Promise<TApplication>;
    /**
     * Returns the support level for the browser.
     *
     * There are some specific browsers that we know don't work with SPFx, and some
     * features that the browser needs to support for SPFx. In those cases the page
     * shouldn't even try to load.
     *
     * This is intended to be called by the page scripts before start.
     * There is no need, and no use, to call it from your own code.
     */
    static getBrowserCompatibility(): IBrowserCompatibility;
    private static _initializeEnvironment();
    private static _initializeTelemetry(preloadedData);
    private static _isQueryParameterTrue(name);
    private static _isConsoleLogEnabled();
    private static _isTelemetryDisabled();
}
