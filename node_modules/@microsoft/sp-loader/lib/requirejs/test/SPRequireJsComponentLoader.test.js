"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var test_1 = require("@microsoft/sp-core-library/lib/test");
var SPRequireJsComponentLoader_1 = require("../SPRequireJsComponentLoader");
var normalizeName_1 = require("../normalizeName");
var ComponentStore_1 = require("../../stores/ComponentStore");
var ManifestStore_1 = require("../../stores/ManifestStore");
var RequireJsLoader_1 = require("../RequireJsLoader");
var TestManifests_1 = require("../../test/data/TestManifests");
describe('SPRequireJsComponentLoader tests', function () {
    var componentLoader;
    var requireJsLoaderMock;
    before(function () {
        componentLoader = new SPRequireJsComponentLoader_1.default();
    });
    beforeEach(function () {
        requireJsLoaderMock = sinon.mock(RequireJsLoader_1.default.instance);
    });
    afterEach(function () {
        requireJsLoaderMock.restore();
    });
    describe('loadScript()', function () {
        it('loads script without options', function (done) {
            var url = 'thisIsAUrl';
            var result = 'thisIsAString';
            var retValue = Promise.resolve(result);
            requireJsLoaderMock.expects('requireLoad').once().withExactArgs(url).returns(retValue);
            var modulePromise = componentLoader.loadScript(url); 
            modulePromise.then(function (module) {
                chai_1.assert.equal(module, result);
                requireJsLoaderMock.verify();
                done();
            });
        });
        it('loads script with empty options', function (done) {
            var url = 'thisIsAUrl';
            var result = 'thisIsAString';
            var retValue = Promise.resolve(result);
            requireJsLoaderMock.expects('requireLoad').once().withExactArgs(url).returns(retValue);
            var modulePromise = componentLoader.loadScript(url, {}); 
            modulePromise.then(function (module) {
                chai_1.assert.equal(module, result);
                requireJsLoaderMock.verify();
                done();
            });
        });
        it('loads script with string as options', function (done) {
            chai_1.assert.throws(function () { componentLoader.loadScript('thisIsAUrl', 'thisIsAString'); });
            done();
        });
        it('loads script with global name', function (done) {
            var url = 'thisIsAUrl';
            var result = 'thisIsAString';
            var options = {
                globalExportsName: 'thisIsAName'
            };
            requireJsLoaderMock.expects('requireLoad').once().withExactArgs(url).returns(Promise.resolve());
            window[options.globalExportsName] = result; 
            var modulePromise = componentLoader.loadScript(url, options); 
            modulePromise.then(function (module) {
                chai_1.assert.equal(module, result);
                requireJsLoaderMock.verify();
                done();
            });
        });
    });
    describe('loadComponent()', function () {
        afterEach(function () {
            ComponentStore_1.default._instance = undefined; 
            ManifestStore_1.default._instance = undefined; 
        });
        it('loads component from cache, if available', function (done) {
            var manifest = TestManifests_1.default.manifest;
            var expectedOutput = 'thisIsTheModuleObject';
            var retValue = new Promise(function (resolve) { resolve(expectedOutput); });
            var componentStoreMock = sinon.mock(ComponentStore_1.default.instance);
            componentStoreMock.expects('getComponent').once().withArgs(manifest.id, manifest.version).returns(retValue);
            requireJsLoaderMock.expects('requireLoad').never();
            var actualOutput = componentLoader.loadComponent(manifest);
            actualOutput.then(function (value) {
                chai_1.assert.equal(value, expectedOutput);
                componentStoreMock.verify();
                componentStoreMock.restore();
                requireJsLoaderMock.verify();
                done();
            });
        });
        it('loads component without dependencies', function (done) {
            var manifest = TestManifests_1.default.manifest;
            var expectedOutput = 'thisIsTheModuleObject';
            requirejsLoadsComponentAndExpectsBeingCalledOnce(requireJsLoaderMock, manifest, expectedOutput);
            var actualOutput = componentLoader.loadComponent(manifest);
            actualOutput.then(function (value) {
                chai_1.assert.equal(value, expectedOutput);
                done();
            });
        });
        it('loads component with a path dependency', function (done) {
            var manifest = TestManifests_1.default.manifestWithPathDependency;
            var expectedOutput = 'thisIsTheModuleObject';
            requirejsLoadsComponentAndExpectsBeingCalledOnce(requireJsLoaderMock, manifest, expectedOutput);
            requirejsLoadsPathDependencyAndExpectsBeingCalledOnce(requireJsLoaderMock, manifest, TestManifests_1.default.pathDependencyName, 'anything');
            var actualOutput = componentLoader.loadComponent(manifest);
            actualOutput.then(function (value) {
                chai_1.assert.equal(value, expectedOutput);
                var normalizedName = normalizeName_1.default(manifest);
                var normalizedPathDepName = normalizeName_1.default(manifest, TestManifests_1.default.pathDependencyName);
                done();
            });
        });
        it('loads component with a component dependency', function (done) {
            var manifest = TestManifests_1.default.manifestWithComponentDependency;
            var expectedOutput = 'thisIsTheModuleObject';
            requirejsLoadsComponentAndExpectsBeingCalledOnce(requireJsLoaderMock, manifest, expectedOutput);
            var dependencyManifest = TestManifests_1.default.componentDependencyManifest;
            requirejsLoadsComponentAndExpectsBeingCalledOnce(requireJsLoaderMock, dependencyManifest, 'anything');
            componentLoader.registerManifests([dependencyManifest]);
            var actualOutput = componentLoader.loadComponent(manifest);
            actualOutput.then(function (value) {
                chai_1.assert.equal(value, expectedOutput);
                var normalizedName = normalizeName_1.default(manifest);
                var normalizedDependencyName = normalizeName_1.default(dependencyManifest);
                done();
            });
        });
        it('loads component with a component dependency with failover path', function (done) {
            var manifest = TestManifests_1.default.manifestWithComponentDependencyWithFailoverPath;
            var expectedOutput = 'thisIsTheModuleObject';
            requirejsLoadsComponentAndExpectsBeingCalledOnce(requireJsLoaderMock, manifest, expectedOutput);
            var normalizedFailoverPath = normalizeName_1.normalizeFailoverPathName(TestManifests_1.default.componentDependencyName);
            requireJsLoaderMock.expects('requireLoad').once().withArgs(normalizedFailoverPath)
                .returns(new Promise(function (resolve) { resolve('anything'); }));
            var actualOutput = componentLoader.loadComponent(manifest);
            actualOutput.then(function (value) {
                chai_1.assert.equal(value, expectedOutput);
                done();
            });
        });
        it('throws error when a component dependency has not been registered', function (done) {
            var manifest = TestManifests_1.default.manifestWithComponentDependency;
            componentLoader.loadComponent(manifest).then(function (value) {
                chai_1.assert.fail();
                done();
            }).catch(function (error) {
                done();
            });
        });
    });
    describe('loadComponentById()', function () {
        afterEach(function () {
            ComponentStore_1.default._instance = undefined; 
            ManifestStore_1.default._instance = undefined; 
        });
        it('fails if id is undefined or empty', function () {
            chai_1.assert.throws(function () { componentLoader.loadComponentById(test_1.TEST_UNDEFINED); });
            chai_1.assert.throws(function () { componentLoader.loadComponentById(''); });
        });
        it('fails if there is no manifest for the id and version', function () {
            chai_1.assert.throws(function () { componentLoader.loadComponentById(TestManifests_1.default.manifest.id); });
        });
        it('loads the component with a manifest matching id and version', function (done) {
            var manifest = TestManifests_1.default.manifest;
            var expectedOutput = 'thisIsTheModuleObject';
            requirejsLoadsComponentAndExpectsBeingCalledOnce(requireJsLoaderMock, manifest, expectedOutput);
            componentLoader.registerManifests([manifest]);
            var actualOutput = componentLoader.loadComponentById(manifest.id, manifest.version);
            actualOutput.then(function (value) {
                chai_1.assert.equal(value, expectedOutput);
                done();
            });
        });
        it('loads the component if id is in upper-case', function (done) {
            var manifest = TestManifests_1.default.manifest;
            var expectedOutput = 'thisIsTheModuleObject';
            requirejsLoadsComponentAndExpectsBeingCalledOnce(requireJsLoaderMock, manifest, expectedOutput);
            componentLoader.registerManifests([manifest]);
            var actualOutput = componentLoader.loadComponentById(manifest.id.toUpperCase(), manifest.version);
            actualOutput.then(function (value) {
                chai_1.assert.equal(value, expectedOutput);
                done();
            });
        });
    });
});
function requirejsLoadsComponentAndExpectsBeingCalledOnce(requireJsLoaderMock, manifest, module 
) {
    var retValue = new Promise(function (resolve) { resolve(module); });
    var normalizedName = normalizeName_1.default(manifest);
    requireJsLoaderMock.expects('requireLoad').once().withArgs(normalizedName).returns(retValue);
}
function requirejsLoadsPathDependencyAndExpectsBeingCalledOnce(requireJsLoaderMock, manifest, pathDependencyName, module 
) {
    var retValue = new Promise(function (resolve) { resolve(module); });
    var normalizedName = normalizeName_1.default(manifest, pathDependencyName);
    requireJsLoaderMock.expects('requireLoad').once().withArgs(normalizedName).returns(retValue);
}
