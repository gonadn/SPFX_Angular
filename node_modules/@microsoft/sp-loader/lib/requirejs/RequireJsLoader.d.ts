// [ts-npm-lint] removed reference to '../../typings/requirejs/index.d.ts'
import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
/**
 * Loader for RequireJS.
 * Provides the instance of RequireJS and allows methods for configuration.
 */
export default class RequireJsLoader {
    private static readonly _requireEventName;
    /**
     * This is the configured base URL for RequireJS.
     * When a user tries to call RequireJS with a relative path, an error will show this as the base URL.
     *
     * Example:
     * require("myModule") => Error: https://relative-path.invalid/myModule not found
     */
    private static readonly _invalidBaseUrl;
    private static _window;
    private static _instance;
    static readonly instance: RequireJsLoader;
    private _requirejs;
    private _define;
    private _configuredFailoverPaths;
    /**
     * Ensures that the module is present in RequireJS with the defined name.
     * In order to do so, it removes any pre-existing module that was already loaded.
     */
    ensure(name: string, module: any): void;
    /**
     * Calls actual RequireJS config()
     */
    requireConfig(config: RequireConfig): void;
    /**
     * Calls RequireJS require()
     * Catches exceptions and returns a rejected promise with the error from RequireJS
     */
    requireLoad<TModule>(name: string): Promise<TModule>;
    /**
     * Calls RequireJS undef() with the name matching the input manifest
     */
    requireDelete(manifest: IClientSideComponentManifest): void;
    /**
     * Sets the config for RequireJS. Handles global exports, renames the dependencies.
     * Also sets AddressStore with the right mapping between script and URL.
     */
    configure(manifest: IClientSideComponentManifest): void;
    /**
     * If RequireJS is not loaded already, it will load it.
     * If it's loaded, it just takes the necessary variables from the window.
     */
    private _initialize();
    private _loadRequireJs();
    /**
     * Returns true if RequireJS has been loaded and is in the window variable
     */
    private _isRequireJsLoaded();
    /**
     * Sets the needed RequireJS variables in the RequireJsLoader to avoid going to the window
     * variable every time.
     */
    private _setRequireJsLocalVariables();
    /**
     * Helper method for RequireJS loader.
     * RequireJS takes addresses without the js extension, so this calls the real resolveAddress and removes that
     */
    private _resolveAddress(manifest, resourceName);
}
