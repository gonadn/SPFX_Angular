"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Url = require("url");
var chai_1 = require("chai");
var debugManifestProvider_1 = require("./../debugManifestProvider");
var debugManifestProvider = require("./../debugManifestProvider");
var MockSPComponentLoader_1 = require("./../../test/mocks/MockSPComponentLoader");
var DebugManifestPrompt = require("./../confirmDebugAllowed");
var ManifestStore_1 = require("./../../stores/ManifestStore");
var showDebugError = require("./../showDebugError");
var sessionStorageKey = 'sp-loader_debugManifests';
var fragmentParameterName = 'debugManifestsFile';
describe('debugManifestProvider', function () {
    var sandbox;
    beforeEach(function () { return sandbox = sinon.sandbox.create(); });
    afterEach(function () { return sandbox.restore(); });
    describe('_parseQueryParameters', function () {
        it('returns {} for an undefined parameter', function () {
            var result = debugManifestProvider_1._parseQueryParameters(undefined);
            chai_1.assert.deepEqual(result, {});
        });
        it('extracts a single parameter', function () {
            var key = 'foo';
            var value = 'bar';
            var testString = key + "=" + value;
            var result = debugManifestProvider_1._parseQueryParameters(testString);
            chai_1.assert.deepEqual(result, (_a = {}, _a[key] = { value: value, position: 0 }, _a));
            var _a;
        });
        it('extracts two parameters', function () {
            var key1 = 'foo';
            var value1 = 'bar';
            var key2 = 'baz';
            var value2 = 'ban';
            var testString = key1 + "=" + value1 + "&" + key2 + "=" + value2;
            var result = debugManifestProvider_1._parseQueryParameters(testString);
            chai_1.assert.deepEqual(result, (_a = {},
                _a[key1] = {
                    value: value1,
                    position: 0
                },
                _a[key2] = {
                    value: value2,
                    position: 1
                },
                _a));
            var _a;
        });
        it('extracts two parameters in reverse order', function () {
            var key1 = 'foo';
            var value1 = 'bar';
            var key2 = 'baz';
            var value2 = 'ban';
            var testString = key2 + "=" + value2 + "&" + key1 + "=" + value1;
            var result = debugManifestProvider_1._parseQueryParameters(testString);
            chai_1.assert.deepEqual(result, (_a = {},
                _a[key1] = {
                    value: value1,
                    position: 1
                },
                _a[key2] = {
                    value: value2,
                    position: 0
                },
                _a));
            var _a;
        });
        it('extracts the last parameter when a key is repeated', function () {
            var key = 'foo';
            var value1 = 'bar';
            var value2 = 'ban';
            var testString = key + "=" + value1 + "&" + key + "=" + value2;
            var result = debugManifestProvider_1._parseQueryParameters(testString);
            chai_1.assert.deepEqual(result, (_a = {},
                _a[key] = {
                    value: value2,
                    position: 1
                },
                _a));
            var _a;
        });
        it('extracts a paramter without a value', function () {
            var key1 = 'foo';
            var value1 = 'bar';
            var key2 = 'ban';
            var testString = key1 + "=" + value1 + "&" + key2;
            var result = debugManifestProvider_1._parseQueryParameters(testString);
            chai_1.assert.deepEqual(result, (_a = {},
                _a[key1] = {
                    value: value1,
                    position: 0
                },
                _a[key2] = {
                    value: undefined,
                    position: 1
                },
                _a));
            var _a;
        });
        it('extracts a paramter without a value when it\'s the first paramter', function () {
            var key1 = 'foo';
            var value1 = 'bar';
            var key2 = 'ban';
            var testString = key2 + "&" + key1 + "=" + value1;
            var result = debugManifestProvider_1._parseQueryParameters(testString);
            chai_1.assert.deepEqual(result, (_a = {},
                _a[key2] = {
                    value: undefined,
                    position: 0
                },
                _a[key1] = {
                    value: value1,
                    position: 1
                },
                _a));
            var _a;
        });
        it('ignores a leading "?" and extracts two parameters', function () {
            var key1 = 'foo';
            var value1 = 'bar';
            var key2 = 'baz';
            var value2 = 'ban';
            var testString = "?" + key1 + "=" + value1 + "&" + key2 + "=" + value2;
            var result = debugManifestProvider_1._parseQueryParameters(testString);
            chai_1.assert.deepEqual(result, (_a = {},
                _a[key1] = {
                    value: value1,
                    position: 0
                },
                _a[key2] = {
                    value: value2,
                    position: 1
                },
                _a));
            var _a;
        });
        it('ignores a leading "#" and extracts two parameters', function () {
            var key1 = 'foo';
            var value1 = 'bar';
            var key2 = 'baz';
            var value2 = 'ban';
            var testString = "#" + key1 + "=" + value1 + "&" + key2 + "=" + value2;
            var result = debugManifestProvider_1._parseQueryParameters(testString);
            chai_1.assert.deepEqual(result, (_a = {},
                _a[key1] = {
                    value: value1,
                    position: 0
                },
                _a[key2] = {
                    value: value2,
                    position: 1
                },
                _a));
            var _a;
        });
    });
    describe('_getAndClearFragmentQueryParameter', function () {
        var replaceStateSpy;
        var oldReplaceState;
        var oldHash;
        var replaceStateResults;
        beforeEach(function () {
            replaceStateResults = [];
            oldHash = window.location.hash;
            replaceStateSpy = sinon.spy(function (data, title, url) {
                replaceStateResults.push({ data: data, title: title, url: url });
                window.location.hash = getFragment(url) || '';
            });
            oldReplaceState = window.history.replaceState;
            window.history.replaceState = replaceStateSpy;
        });
        afterEach(function () {
            window.history.replaceState = oldReplaceState;
            window.location.hash = oldHash || '';
        });
        after(clearFragment);
        describe('with clearParameter=false', function () {
            afterEach(function () {
                chai_1.assert.isTrue(replaceStateSpy.notCalled);
            });
            it('returns undefined for an empty hash', function () {
                window.location.hash = '';
                var result = debugManifestProvider_1._getAndClearFragmentQueryParameter('foo', false);
                chai_1.assert.isUndefined(result);
            });
            it('extracts a parameter from a hash with a single paramter', function () {
                var key = 'foo';
                var value = 'bar';
                window.location.hash = key + "=" + value;
                var result = debugManifestProvider_1._getAndClearFragmentQueryParameter(key, false);
                chai_1.assert.equal(result, value);
            });
            it('extracts two parameters', function () {
                var key1 = 'foo';
                var value1 = 'bar';
                var key2 = 'baz';
                var value2 = 'ban';
                window.location.hash = key1 + "=" + value1 + "&" + key2 + "=" + value2;
                var result1 = debugManifestProvider_1._getAndClearFragmentQueryParameter(key1, false);
                var result2 = debugManifestProvider_1._getAndClearFragmentQueryParameter(key2, false);
                chai_1.assert.equal(result1, value1);
                chai_1.assert.equal(result2, value2);
            });
            it('extracts two parameters in reverse order', function () {
                var key1 = 'foo';
                var value1 = 'bar';
                var key2 = 'baz';
                var value2 = 'ban';
                window.location.hash = key2 + "=" + value2 + "&" + key1 + "=" + value1;
                var result1 = debugManifestProvider_1._getAndClearFragmentQueryParameter(key1, false);
                var result2 = debugManifestProvider_1._getAndClearFragmentQueryParameter(key2, false);
                chai_1.assert.equal(result1, value1);
                chai_1.assert.equal(result2, value2);
            });
            it('extracts the last parameter when a key is repeated', function () {
                var key = 'foo';
                var value1 = 'bar';
                var value2 = 'ban';
                window.location.hash = key + "=" + value1 + "&" + key + "=" + value2;
                var result = debugManifestProvider_1._getAndClearFragmentQueryParameter(key, false);
                chai_1.assert.equal(result, value2);
            });
            it('extracts a paramter without a value as an empty string', function () {
                var key1 = 'foo';
                var value1 = 'bar';
                var key2 = 'ban';
                window.location.hash = key1 + "=" + value1 + "&" + key2;
                var result = debugManifestProvider_1._getAndClearFragmentQueryParameter(key2, false);
                chai_1.assert.equal(result, '');
            });
            it('extracts a paramter without a value as an empty string when it\'s the first paramter', function () {
                var key1 = 'foo';
                var value1 = 'bar';
                var key2 = 'ban';
                window.location.hash = key2 + "&" + key1 + "=" + value1;
                var result = debugManifestProvider_1._getAndClearFragmentQueryParameter(key2, false);
                chai_1.assert.equal(result, '');
            });
            it('decodes an encoded parameter', function () {
                var key = 'foo';
                var value = 'bar&baz&ban';
                window.location.hash = key + "=" + encodeURIComponent(value);
                var result = debugManifestProvider_1._getAndClearFragmentQueryParameter(key, false);
                chai_1.assert.equal(result, value);
            });
            it('looks in the querystring if the fragment doesn\'t contain the parameter', function () {
                var key = 'foo';
                var value = 'bar';
                var originalUrl = window.location.toString();
                var newUrl = key + "=" + value;
                if (window.location.search) {
                    newUrl = originalUrl + "&" + newUrl;
                }
                else {
                    newUrl = originalUrl + "?" + newUrl;
                }
                window.history.replaceState = oldReplaceState;
                window.history.replaceState('', document.title, newUrl);
                var result = debugManifestProvider_1._getAndClearFragmentQueryParameter(key, false);
                chai_1.assert.equal(result, value);
                window.history.replaceState('', document.title, originalUrl);
            });
        });
        describe('with clearParameter=true', function () {
            it('returns undefined for an empty hash', function () {
                window.location.hash = '';
                var result = debugManifestProvider_1._getAndClearFragmentQueryParameter('foo', true);
                chai_1.assert.isUndefined(result);
                chai_1.assert.isTrue(replaceStateSpy.notCalled);
            });
            it('extracts a parameter from a hash with a single paramter', function () {
                var key = 'foo';
                var value = 'bar';
                window.location.hash = key + "=" + value;
                var result = debugManifestProvider_1._getAndClearFragmentQueryParameter(key, true);
                chai_1.assert.equal(result, value);
                chai_1.assert.isTrue(replaceStateSpy.calledOnce);
                chai_1.assert.isNull(getFragment(replaceStateResults[0].url));
            });
            it('extracts two parameters', function () {
                var key1 = 'foo';
                var value1 = 'bar';
                var key2 = 'baz';
                var value2 = 'ban';
                window.location.hash = key1 + "=" + value1 + "&" + key2 + "=" + value2;
                var result1 = debugManifestProvider_1._getAndClearFragmentQueryParameter(key1, true);
                chai_1.assert.equal(getFragment(replaceStateResults[0].url), key2 + "=" + value2);
                chai_1.assert.isTrue(replaceStateSpy.calledOnce);
                var result2 = debugManifestProvider_1._getAndClearFragmentQueryParameter(key2, true);
                chai_1.assert.equal(result1, value1);
                chai_1.assert.equal(result2, value2);
                chai_1.assert.isNull(getFragment(replaceStateResults[1].url));
                chai_1.assert.isTrue(replaceStateSpy.calledTwice);
            });
            it('extracts two parameters in reverse order', function () {
                var key1 = 'foo';
                var value1 = 'bar';
                var key2 = 'baz';
                var value2 = 'ban';
                window.location.hash = key2 + "=" + value2 + "&" + key1 + "=" + value1;
                var result1 = debugManifestProvider_1._getAndClearFragmentQueryParameter(key1, true);
                chai_1.assert.equal(getFragment(replaceStateResults[0].url), key2 + "=" + value2);
                chai_1.assert.isTrue(replaceStateSpy.calledOnce);
                var result2 = debugManifestProvider_1._getAndClearFragmentQueryParameter(key2, true);
                chai_1.assert.equal(result1, value1);
                chai_1.assert.equal(result2, value2);
                chai_1.assert.isNull(getFragment(replaceStateResults[1].url));
                chai_1.assert.isTrue(replaceStateSpy.calledTwice);
            });
            it('extracts the last parameter when a key is repeated', function () {
                var key = 'foo';
                var value1 = 'bar';
                var value2 = 'ban';
                window.location.hash = key + "=" + value1 + "&" + key + "=" + value2;
                var result = debugManifestProvider_1._getAndClearFragmentQueryParameter(key, true);
                chai_1.assert.equal(result, value2);
                chai_1.assert.isNull(getFragment(replaceStateResults[0].url));
                chai_1.assert.isTrue(replaceStateSpy.calledOnce);
            });
            it('extracts a paramter without a value as an empty string', function () {
                var key1 = 'foo';
                var value1 = 'bar';
                var key2 = 'ban';
                window.location.hash = key1 + "=" + value1 + "&" + key2;
                var result = debugManifestProvider_1._getAndClearFragmentQueryParameter(key2, true);
                chai_1.assert.equal(result, '');
                chai_1.assert.equal(getFragment(replaceStateResults[0].url), key1 + "=" + value1);
                chai_1.assert.isTrue(replaceStateSpy.calledOnce);
            });
            it('extracts a paramter without a value as an empty string when it\'s the first paramter', function () {
                var key1 = 'foo';
                var value1 = 'bar';
                var key2 = 'ban';
                window.location.hash = key2 + "&" + key1 + "=" + value1;
                var result = debugManifestProvider_1._getAndClearFragmentQueryParameter(key2, true);
                chai_1.assert.equal(result, '');
                chai_1.assert.equal(getFragment(replaceStateResults[0].url), key1 + "=" + value1);
                chai_1.assert.isTrue(replaceStateSpy.calledOnce);
            });
            it('decodes an encoded parameter', function () {
                var key = 'foo';
                var value = 'bar&baz&ban';
                window.location.hash = key + "=" + encodeURIComponent(value);
                var result = debugManifestProvider_1._getAndClearFragmentQueryParameter(key, true);
                chai_1.assert.equal(result, value);
                chai_1.assert.isTrue(replaceStateSpy.calledOnce);
                chai_1.assert.isNull(getFragment(replaceStateResults[0].url));
            });
            it('keeps the parameters in the same order after the first one has been removed', function () {
                var key1 = 'foo';
                var value1 = 'bar';
                var key2 = 'baz';
                var value2 = 'ban';
                var key3 = 'faz';
                var value3 = 'fan';
                window.location.hash = key1 + "=" + value1 + "&" + key2 + "=" + value2 + "&" + key3 + "=" + value3;
                debugManifestProvider_1._getAndClearFragmentQueryParameter(key1, true);
                chai_1.assert.equal(getFragment(replaceStateResults[0].url), key2 + "=" + value2 + "&" + key3 + "=" + value3);
            });
            it('keeps the parameters in the same order after the second one has been removed', function () {
                var key1 = 'foo';
                var value1 = 'bar';
                var key2 = 'baz';
                var value2 = 'ban';
                var key3 = 'faz';
                var value3 = 'fan';
                window.location.hash = key1 + "=" + value1 + "&" + key2 + "=" + value2 + "&" + key3 + "=" + value3;
                debugManifestProvider_1._getAndClearFragmentQueryParameter(key2, true);
                chai_1.assert.equal(getFragment(replaceStateResults[0].url), key1 + "=" + value1 + "&" + key3 + "=" + value3);
            });
            it('keeps the parameters in the same order after the last one has been removed', function () {
                var key1 = 'foo';
                var value1 = 'bar';
                var key2 = 'baz';
                var value2 = 'ban';
                var key3 = 'faz';
                var value3 = 'fan';
                window.location.hash = key1 + "=" + value1 + "&" + key2 + "=" + value2 + "&" + key3 + "=" + value3;
                debugManifestProvider_1._getAndClearFragmentQueryParameter(key3, true);
                chai_1.assert.equal(getFragment(replaceStateResults[0].url), key1 + "=" + value1 + "&" + key2 + "=" + value2);
            });
            it('looks in the querystring if the fragment doesn\'t contain the parameter', function () {
                var key = 'foo';
                var value = 'bar';
                var originalUrl = window.location.toString();
                var newUrl = key + "=" + value;
                if (window.location.search) {
                    newUrl = originalUrl + "&" + newUrl;
                }
                else {
                    newUrl = originalUrl + "?" + newUrl;
                }
                window.history.replaceState = oldReplaceState;
                window.history.replaceState('', document.title, newUrl);
                var result = debugManifestProvider_1._getAndClearFragmentQueryParameter(key, false);
                chai_1.assert.equal(result, value);
                chai_1.assert.isTrue(replaceStateSpy.notCalled);
                window.history.replaceState('', document.title, originalUrl);
            });
        });
    });
    describe('_tryGetSessionStorageManifests', function () {
        var consoleDebugStub;
        beforeEach(function () {
            consoleDebugStub = sandbox.stub(console, 'debug');
            console.debug = consoleDebugStub;
        });
        afterEach(function () {
            delete sessionStorage[sessionStorageKey];
        });
        it('returns an empty object when nothing is in session storage', function () {
            delete sessionStorage[sessionStorageKey];
            var result = debugManifestProvider_1._tryGetSessionStorageManifests();
            chai_1.assert.deepEqual(result, {});
            chai_1.assert.isTrue(consoleDebugStub.notCalled);
        });
        it('returns the deserialized object from session storage', function () {
            var testObject = { 'ABC': {} };
            sessionStorage[sessionStorageKey] = JSON.stringify(testObject);
            var result = debugManifestProvider_1._tryGetSessionStorageManifests();
            chai_1.assert.deepEqual(result, testObject);
            chai_1.assert.isTrue(consoleDebugStub.notCalled);
        });
        it('prints to the console and returns an empty object if the serialized object is invalid', function () {
            sessionStorage[sessionStorageKey] = '{';
            var result = debugManifestProvider_1._tryGetSessionStorageManifests();
            chai_1.assert.deepEqual(result, {});
            chai_1.assert.isTrue(consoleDebugStub.calledOnce);
            chai_1.assert.equal(consoleDebugStub.getCall(0).args[0].indexOf('Error querying session storage'), 0);
        });
        it('prints to the console and returns an empty object if accessing session storage throws', function () {
            var oldGetter = Storage.prototype.getItem;
            Storage.prototype.getItem = function () { throw 'error'; };
            var result = debugManifestProvider_1._tryGetSessionStorageManifests();
            chai_1.assert.deepEqual(result, {});
            chai_1.assert.isTrue(consoleDebugStub.calledOnce);
            chai_1.assert.equal(consoleDebugStub.getCall(0).args[0].indexOf('Error querying session storage'), 0);
            Storage.prototype.getItem = oldGetter;
        });
    });
    describe('_trySetSessionStorageManifests', function () {
        var consoleDebugStub;
        beforeEach(function () {
            consoleDebugStub = sandbox.stub(console, 'debug');
        });
        afterEach(function () {
            delete sessionStorage[sessionStorageKey];
        });
        it('correctly sets session storage with a serialized object', function () {
            var testObject = { 'ABC': {} };
            debugManifestProvider_1._trySetSessionStorageManifests(testObject);
            chai_1.assert.equal(sessionStorage[sessionStorageKey], JSON.stringify(testObject));
            chai_1.assert.isTrue(consoleDebugStub.notCalled);
        });
        it('prints to the console and doesn\'t update session storage if the object isn\'t serializable', function () {
            var testInitialData = 'foobar';
            sessionStorage[sessionStorageKey] = testInitialData;
            debugManifestProvider_1._trySetSessionStorageManifests(window); 
            chai_1.assert.equal(sessionStorage[sessionStorageKey], testInitialData);
            chai_1.assert.isTrue(consoleDebugStub.calledOnce);
            chai_1.assert.equal(consoleDebugStub.getCall(0).args[0].indexOf('Error setting session storage'), 0);
        });
        it('prints to the console if accessing session storage throws', function () {
            var oldSetter = Storage.prototype.setItem;
            Storage.prototype.setItem = function () { throw 'error'; };
            debugManifestProvider_1._trySetSessionStorageManifests({});
            chai_1.assert.isTrue(consoleDebugStub.calledOnce);
            chai_1.assert.equal(consoleDebugStub.getCall(0).args[0].indexOf('Error setting session storage'), 0);
            Storage.prototype.setItem = oldSetter;
        });
        it('clears the the session storage entry if _trySetSessionStorageManifests receives undefined', function () {
            sessionStorage[sessionStorageKey] = 'foobar';
            debugManifestProvider_1._trySetSessionStorageManifests(undefined);
            chai_1.assert.isUndefined(sessionStorage[sessionStorageKey]);
            chai_1.assert.isTrue(consoleDebugStub.notCalled);
        });
    });
    describe('_getDebugManifestsFromManifestFiles', function () {
        var mockComponentLoader;
        var loadScriptStub;
        function installStub(f) {
            loadScriptStub = sandbox.stub(mockComponentLoader, 'loadScript', function (url, options) {
                return f(url, options);
            });
        }
        beforeEach(function () {
            mockComponentLoader = new MockSPComponentLoader_1.default();
        });
        it('returns the value from the script', function (done) {
            var testUrl = 'https://foo.bar/baz.js';
            var expectedResult = ['a', 'b', 'c']; 
            installStub(function () { return Promise.resolve({ getManifests: function () { return expectedResult; } }); });
            var resultPromise = debugManifestProvider_1._getDebugManifestsFromManifestFiles(mockComponentLoader, [testUrl]);
            resultPromise.then(function (result) {
                chai_1.assert.deepEqual(result, expectedResult);
                chai_1.assert.isTrue(loadScriptStub.calledOnce);
                chai_1.assert.isTrue(loadScriptStub.calledWith(testUrl));
                done();
            }).catch(function () {
                chai_1.assert.fail();
                done();
            });
        });
        it('only loads the first script', function (done) {
            var testUrl = 'https://foo.bar/baz.js';
            var expectedResult = ['a', 'b', 'c']; 
            installStub(function () { return Promise.resolve({ getManifests: function () { return expectedResult; } }); });
            var resultPromise = debugManifestProvider_1._getDebugManifestsFromManifestFiles(mockComponentLoader, [testUrl, 'https://bar.foo/script.js']);
            resultPromise.then(function (result) {
                chai_1.assert.deepEqual(result, expectedResult);
                chai_1.assert.isTrue(loadScriptStub.calledOnce);
                chai_1.assert.isTrue(loadScriptStub.calledWith(testUrl));
                done();
            }).catch(function () {
                chai_1.assert.fail();
                done();
            });
        });
        it('rejects the promise if the script fails', function (done) {
            var testUrl = 'https://foo.bar/baz.js';
            var expectedResult = new Error();
            installStub(function () { return Promise.reject(expectedResult); });
            var resultPromise = debugManifestProvider_1._getDebugManifestsFromManifestFiles(mockComponentLoader, [testUrl]);
            resultPromise.then(function () {
                chai_1.assert.fail();
                done();
            }).catch(function (result) {
                chai_1.assert.equal(result, expectedResult);
                chai_1.assert.isTrue(loadScriptStub.calledOnce);
                chai_1.assert.isTrue(loadScriptStub.calledWith(testUrl));
                done();
            });
        });
        it('loads the second script if the first fails', function (done) {
            var testUrl1 = 'https://foo.bar/baz.js';
            var testUrl2 = 'https://bar.foo/baz.js';
            var expectedResult = ['a', 'b', 'c']; 
            installStub(function (url) { return (url === testUrl1)
                ? Promise.reject(new Error())
                : Promise.resolve({ getManifests: function () { return expectedResult; } }); });
            var resultPromise = debugManifestProvider_1._getDebugManifestsFromManifestFiles(mockComponentLoader, [testUrl1, testUrl2]);
            resultPromise.then(function (result) {
                chai_1.assert.deepEqual(result, expectedResult);
                chai_1.assert.isTrue(loadScriptStub.calledTwice);
                chai_1.assert.isTrue(loadScriptStub.calledWith(testUrl1));
                chai_1.assert.isTrue(loadScriptStub.calledWith(testUrl2));
                done();
            }).catch(function () {
                chai_1.assert.fail();
                done();
            });
        });
        it('rejects the promise if all scripts fail', function (done) {
            var testUrl1 = 'https://foo.bar/baz.js';
            var testUrl2 = 'https://bar.foo/baz.js';
            var expectedResult = new Error();
            installStub(function (url) { return Promise.reject(expectedResult); });
            var resultPromise = debugManifestProvider_1._getDebugManifestsFromManifestFiles(mockComponentLoader, [testUrl1, testUrl2]);
            resultPromise.then(function () {
                chai_1.assert.fail();
                done();
            }).catch(function (result) {
                chai_1.assert.deepEqual(result, expectedResult);
                chai_1.assert.isTrue(loadScriptStub.calledTwice);
                chai_1.assert.isTrue(loadScriptStub.calledWith(testUrl1));
                chai_1.assert.isTrue(loadScriptStub.calledWith(testUrl2));
                done();
            });
        });
    });
    describe('_getDebugManifests', function () {
        var mockComponentLoader;
        var loadScriptStub;
        var showDebugErrorStub;
        var confirmDebugAllowedStub;
        var consoleDebugStub;
        function installDebugEnabledStub(func) {
            confirmDebugAllowedStub = sandbox.stub(DebugManifestPrompt, 'confirmDebugAllowed', func);
        }
        function installLoadScriptStub(func) {
            loadScriptStub = sandbox.stub(mockComponentLoader, 'loadScript', func);
        }
        beforeEach(function () {
            mockComponentLoader = new MockSPComponentLoader_1.default();
            showDebugErrorStub = sandbox.stub(showDebugError, 'default');
            consoleDebugStub = sandbox.stub(console, 'debug');
        });
        afterEach(function () {
            delete sessionStorage[sessionStorageKey];
            clearFragment();
        });
        it('clears the session storage entry if the reset parameter is present', function (done) {
            var oldUrl = window.location.toString();
            history.replaceState('', document.title, oldUrl + "?reset=true");
            sessionStorage[sessionStorageKey] = 'foobar';
            installLoadScriptStub(function () { return Promise.reject(''); });
            installDebugEnabledStub(function () { return Promise.reject(''); });
            var resultPromise = debugManifestProvider_1._getDebugManifests(mockComponentLoader);
            resultPromise.then(function (result) {
                history.replaceState('', document.title, oldUrl);
                chai_1.assert.deepEqual(result, {});
                chai_1.assert.isTrue(showDebugErrorStub.notCalled);
                chai_1.assert.isTrue(loadScriptStub.notCalled);
                chai_1.assert.isTrue(confirmDebugAllowedStub.notCalled);
                chai_1.assert.isUndefined(sessionStorage[sessionStorageKey]);
                done();
            }).catch(function () {
                history.replaceState('', document.title, oldUrl);
                chai_1.assert.fail();
                done();
            });
        });
        it('returns nothing if there is nothing in session storage and no scripts to load', function (done) {
            installLoadScriptStub(function () { return Promise.reject(''); });
            installDebugEnabledStub(function () { return Promise.reject(''); });
            var resultPromise = debugManifestProvider_1._getDebugManifests(mockComponentLoader);
            resultPromise.then(function (result) {
                chai_1.assert.deepEqual(result, {});
                chai_1.assert.isTrue(showDebugErrorStub.notCalled);
                chai_1.assert.isTrue(loadScriptStub.notCalled);
                chai_1.assert.isUndefined(sessionStorage[sessionStorageKey]);
                done();
            }).catch(function () {
                chai_1.assert.fail();
                done();
            });
        });
        it('returns the session storage entries if there are scripts to load and debug is enabled', function (done) {
            installLoadScriptStub(function () { return Promise.reject(''); });
            installDebugEnabledStub(function () { return Promise.resolve(true); });
            var expectedResult = { 'ABC': {} };
            sessionStorage[sessionStorageKey] = JSON.stringify(expectedResult);
            var resultPromise = debugManifestProvider_1._getDebugManifests(mockComponentLoader);
            resultPromise.then(function (result) {
                chai_1.assert.deepEqual(result, expectedResult);
                chai_1.assert.isTrue(showDebugErrorStub.notCalled);
                chai_1.assert.isTrue(loadScriptStub.notCalled);
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledOnce);
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledWith(true));
                chai_1.assert.equal(sessionStorage[sessionStorageKey], JSON.stringify(expectedResult));
                done();
            }).catch(function () {
                chai_1.assert.fail();
                done();
            });
        });
        it('returns nothing if there are scripts to load and debug is not enabled', function (done) {
            installLoadScriptStub(function () { return Promise.reject(''); });
            installDebugEnabledStub(function () { return Promise.resolve(false); });
            var sessionStorageObject = { 'ABC': {} };
            sessionStorage[sessionStorageKey] = JSON.stringify(sessionStorageObject);
            var resultPromise = debugManifestProvider_1._getDebugManifests(mockComponentLoader);
            resultPromise.then(function (result) {
                chai_1.assert.deepEqual(result, {});
                chai_1.assert.isTrue(showDebugErrorStub.notCalled);
                chai_1.assert.isTrue(loadScriptStub.notCalled);
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledOnce);
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledWith(true));
                chai_1.assert.equal(sessionStorage[sessionStorageKey], JSON.stringify(sessionStorageObject));
                done();
            }).catch(function () {
                chai_1.assert.fail();
                done();
            });
        });
        it('loads the debug script from the fragment if debug is enabled and returns the values', function (done) {
            var testUrl = 'https://foo.bar/baz.js';
            var scriptResult = [
                { id: 'a' },
                { id: 'b' },
                { id: 'c' }
            ]; 
            var expectedResult = {
                a: scriptResult[0],
                b: scriptResult[1],
                c: scriptResult[2]
            };
            installLoadScriptStub(function () { return Promise.resolve({ getManifests: function () { return scriptResult; } }); });
            installDebugEnabledStub(function () { return Promise.resolve(true); });
            window.location.hash = fragmentParameterName + "=" + testUrl;
            var resultPromise = debugManifestProvider_1._getDebugManifests(mockComponentLoader);
            resultPromise.then(function (result) {
                chai_1.assert.deepEqual(result, expectedResult);
                chai_1.assert.isTrue(showDebugErrorStub.notCalled);
                chai_1.assert.isTrue(loadScriptStub.calledOnce);
                chai_1.assert.isTrue(loadScriptStub.calledWith(testUrl));
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledOnce);
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledWith(true));
                chai_1.assert.equal(window.location.hash, '');
                chai_1.assert.equal(sessionStorage[sessionStorageKey], JSON.stringify(expectedResult));
                done();
            }).catch(function () {
                chai_1.assert.fail();
                done();
            });
        });
        it('does not cache manifests if noCache is true', function (done) {
            var testUrl = 'https://foo.bar/baz.js';
            var scriptResult = [
                { id: 'a' },
                { id: 'b' },
                { id: 'c' }
            ]; 
            var expectedResult = {
                a: scriptResult[0],
                b: scriptResult[1],
                c: scriptResult[2]
            };
            installLoadScriptStub(function () { return Promise.resolve({ getManifests: function () { return scriptResult; } }); });
            installDebugEnabledStub(function () { return Promise.resolve(true); });
            delete sessionStorage[sessionStorageKey];
            window.location.hash = fragmentParameterName + "=" + testUrl;
            var resultPromise = debugManifestProvider_1._getDebugManifests(mockComponentLoader, true);
            resultPromise.then(function (result) {
                chai_1.assert.deepEqual(result, expectedResult);
                chai_1.assert.isTrue(showDebugErrorStub.notCalled);
                chai_1.assert.isTrue(loadScriptStub.calledOnce);
                chai_1.assert.isTrue(loadScriptStub.calledWith(testUrl));
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledOnce);
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledWith(true));
                chai_1.assert.equal(window.location.hash, '');
                chai_1.assert.isUndefined(sessionStorage[sessionStorageKey]);
                done();
            }).catch(function () {
                chai_1.assert.fail();
                done();
            });
        });
        it('fragment manifest scripts take precedence over the alternativeManifestsFiles parameter', function (done) {
            var testUrl = 'https://foo.bar/baz.js';
            var scriptResult = [
                { id: 'a' },
                { id: 'b' },
                { id: 'c' }
            ]; 
            var expectedResult = {
                a: scriptResult[0],
                b: scriptResult[1],
                c: scriptResult[2]
            };
            installLoadScriptStub(function () { return Promise.resolve({ getManifests: function () { return scriptResult; } }); });
            installDebugEnabledStub(function () { return Promise.resolve(true); });
            window.location.hash = fragmentParameterName + "=" + testUrl;
            var resultPromise = debugManifestProvider_1._getDebugManifests(mockComponentLoader, false, ['https://bar.foo']);
            resultPromise.then(function (result) {
                chai_1.assert.deepEqual(result, expectedResult);
                chai_1.assert.isTrue(showDebugErrorStub.notCalled);
                chai_1.assert.isTrue(loadScriptStub.calledOnce);
                chai_1.assert.isTrue(loadScriptStub.calledWith(testUrl));
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledOnce);
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledWith(true));
                chai_1.assert.equal(window.location.hash, '');
                chai_1.assert.equal(sessionStorage[sessionStorageKey], JSON.stringify(expectedResult));
                done();
            }).catch(function () {
                chai_1.assert.fail();
                done();
            });
        });
        it('loads the alternativeManifestsFiles if there is no fragment', function (done) {
            var testUrl = 'https://foo.bar/baz.js';
            var scriptResult = [
                { id: 'a' },
                { id: 'b' },
                { id: 'c' }
            ]; 
            var expectedResult = {
                a: scriptResult[0],
                b: scriptResult[1],
                c: scriptResult[2]
            };
            installLoadScriptStub(function () { return Promise.resolve({ getManifests: function () { return scriptResult; } }); });
            installDebugEnabledStub(function () { return Promise.resolve(true); });
            clearFragment();
            var resultPromise = debugManifestProvider_1._getDebugManifests(mockComponentLoader, false, [testUrl]);
            resultPromise.then(function (result) {
                chai_1.assert.deepEqual(result, expectedResult);
                chai_1.assert.isTrue(showDebugErrorStub.notCalled);
                chai_1.assert.isTrue(loadScriptStub.calledOnce);
                chai_1.assert.isTrue(loadScriptStub.calledWith(testUrl));
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledOnce);
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledWith(true));
                chai_1.assert.equal(sessionStorage[sessionStorageKey], JSON.stringify(expectedResult));
                done();
            }).catch(function () {
                chai_1.assert.fail();
                done();
            });
        });
        it('loads the alternativeManifestsFiles in order if one fails if there is no fragment', function (done) {
            var testUrl1 = 'https://foo.bar/baz.js';
            var testUrl2 = 'https://bar.foo/baz.js';
            var scriptResult = [
                { id: 'a' },
                { id: 'b' },
                { id: 'c' }
            ]; 
            var expectedResult = {
                a: scriptResult[0],
                b: scriptResult[1],
                c: scriptResult[2]
            };
            installLoadScriptStub(function (url) { return (url === testUrl1)
                ? Promise.reject(new Error())
                : Promise.resolve({ getManifests: function () { return scriptResult; } }); });
            installDebugEnabledStub(function () { return Promise.resolve(true); });
            clearFragment();
            var resultPromise = debugManifestProvider_1._getDebugManifests(mockComponentLoader, false, [testUrl1, testUrl2]);
            resultPromise.then(function (result) {
                chai_1.assert.deepEqual(result, expectedResult);
                chai_1.assert.isTrue(showDebugErrorStub.notCalled);
                chai_1.assert.isTrue(loadScriptStub.calledTwice);
                chai_1.assert.isTrue(loadScriptStub.calledWith(testUrl1));
                chai_1.assert.isTrue(loadScriptStub.calledWith(testUrl2));
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledOnce);
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledWith(true));
                chai_1.assert.equal(sessionStorage[sessionStorageKey], JSON.stringify(expectedResult));
                done();
            }).catch(function () {
                chai_1.assert.fail();
                done();
            });
        });
        it('shows an error and does not clear the fragment if script loading fails', function (done) {
            var testUrl = 'https://foo.bar/baz.js';
            installLoadScriptStub(function () { return Promise.reject(new Error); });
            installDebugEnabledStub(function () { return Promise.resolve(true); });
            var expectedFragment = fragmentParameterName + "=" + testUrl;
            window.location.hash = expectedFragment;
            var resultPromise = debugManifestProvider_1._getDebugManifests(mockComponentLoader);
            resultPromise.then(function (result) {
                chai_1.assert.fail();
                done();
            }).catch(function (error) {
                chai_1.assert.isTrue(showDebugErrorStub.calledOnce);
                chai_1.assert.isTrue(loadScriptStub.calledOnce);
                chai_1.assert.isTrue(loadScriptStub.calledWith(testUrl));
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledOnce);
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledWith(true));
                chai_1.assert.equal(window.location.hash, "#" + expectedFragment);
                done();
            });
        });
        it('does not show an error if noWarnOnFailure is true', function (done) {
            var testUrl = 'https://foo.bar/baz.js';
            installLoadScriptStub(function () { return Promise.reject(new Error); });
            installDebugEnabledStub(function () { return Promise.resolve(true); });
            var expectedFragment = fragmentParameterName + "=" + testUrl;
            window.location.hash = expectedFragment;
            var resultPromise = debugManifestProvider_1._getDebugManifests(mockComponentLoader, false, [], true);
            resultPromise.then(function (result) {
                chai_1.assert.fail();
                done();
            }).catch(function (error) {
                chai_1.assert.isTrue(showDebugErrorStub.notCalled);
                chai_1.assert.isTrue(loadScriptStub.calledOnce);
                chai_1.assert.isTrue(loadScriptStub.calledWith(testUrl));
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledOnce);
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledWith(true));
                chai_1.assert.equal(window.location.hash, "#" + expectedFragment);
                done();
            });
        });
    });
    describe('loadDebugManifests', function () {
        var mockComponentLoader = new MockSPComponentLoader_1.default();
        var dangerouslyForceDebugStub;
        var confirmDebugAllowedStub;
        var getDebugManifestsStub;
        var registerManifestsStub;
        var registerDebugManifestsStub;
        function installGetDebugManifestsSpy(func) {
            getDebugManifestsStub = sandbox.stub(debugManifestProvider, '_getDebugManifestsWrapper', func);
        }
        beforeEach(function () {
            dangerouslyForceDebugStub = sandbox.stub(DebugManifestPrompt, 'dangerouslyForceDebug');
            confirmDebugAllowedStub = sandbox.stub(DebugManifestPrompt, 'confirmDebugAllowed', function () { return Promise.resolve(true); });
            registerManifestsStub = sandbox.stub(ManifestStore_1.default.instance, 'registerManifests');
            registerDebugManifestsStub = sandbox.stub(ManifestStore_1.default.instance, 'registerDebugManifests');
        });
        it('returns error if _getDebugManifests returns error', function (done) {
            var expectedError = new Error();
            installGetDebugManifestsSpy(function () { return Promise.reject(expectedError); });
            var resultPromise = debugManifestProvider_1.loadDebugManifests(mockComponentLoader);
            resultPromise.then(function () {
                chai_1.assert.fail();
                done();
            }).catch(function (error) {
                chai_1.assert.equal(error, expectedError);
                chai_1.assert.isTrue(registerManifestsStub.notCalled);
                chai_1.assert.isTrue(registerDebugManifestsStub.notCalled);
                chai_1.assert.isTrue(dangerouslyForceDebugStub.notCalled);
                chai_1.assert.isTrue(getDebugManifestsStub.calledOnce);
                chai_1.assert.isTrue(getDebugManifestsStub.calledWith(mockComponentLoader, false, undefined, false));
                done();
            });
        });
        it('passes arguments through to _getDebugManifests', function (done) {
            var expectedError = new Error();
            installGetDebugManifestsSpy(function () { return Promise.reject(expectedError); });
            var resultPromise = debugManifestProvider_1.loadDebugManifests(mockComponentLoader, ['a', 'b'], false, 1, 2);
            resultPromise.then(function () {
                chai_1.assert.fail();
                done();
            }).catch(function (error) {
                chai_1.assert.equal(error, expectedError);
                chai_1.assert.isTrue(registerManifestsStub.notCalled);
                chai_1.assert.isTrue(registerDebugManifestsStub.notCalled);
                chai_1.assert.isTrue(dangerouslyForceDebugStub.notCalled);
                chai_1.assert.isTrue(getDebugManifestsStub.calledOnce);
                chai_1.assert.isTrue(getDebugManifestsStub.calledWith(mockComponentLoader, 1, ['a', 'b'], 2));
                done();
            });
        });
        it('calls DebugManifestPrompt.dangerouslyForceDebug if noPrompt is true', function (done) {
            var expectedError = new Error();
            installGetDebugManifestsSpy(function () { return Promise.reject(expectedError); });
            var resultPromise = debugManifestProvider_1.loadDebugManifests(mockComponentLoader, undefined, true);
            resultPromise.then(function () {
                chai_1.assert.fail();
                done();
            }).catch(function (error) {
                chai_1.assert.equal(error, expectedError);
                chai_1.assert.isTrue(registerManifestsStub.notCalled);
                chai_1.assert.isTrue(registerDebugManifestsStub.notCalled);
                chai_1.assert.isTrue(getDebugManifestsStub.calledOnce);
                chai_1.assert.isTrue(dangerouslyForceDebugStub.calledOnce);
                chai_1.assert.isTrue(getDebugManifestsStub.calledWith(mockComponentLoader, false, undefined, false));
                done();
            });
        });
        it('doesn\'t do anything if _getDebugManifests returns undefined', function (done) {
            installGetDebugManifestsSpy(function () { return Promise.resolve(undefined); });
            var resultPromise = debugManifestProvider_1.loadDebugManifests(mockComponentLoader);
            resultPromise.then(function () {
                chai_1.assert.isTrue(registerManifestsStub.notCalled);
                chai_1.assert.isTrue(getDebugManifestsStub.calledOnce);
                chai_1.assert.isTrue(dangerouslyForceDebugStub.notCalled);
                chai_1.assert.isTrue(getDebugManifestsStub.calledWith(mockComponentLoader, false, undefined, false));
                chai_1.assert.isTrue(registerDebugManifestsStub.notCalled);
                done();
            }).catch(function (error) {
                chai_1.assert.fail();
                done();
            });
        });
        it('registers manifests as debug manifests', function (done) {
            var expectedResult = { 'a': {}, 'b': {} }; 
            installGetDebugManifestsSpy(function () { return Promise.resolve(expectedResult); });
            var resultPromise = debugManifestProvider_1.loadDebugManifests(mockComponentLoader);
            resultPromise.then(function () {
                chai_1.assert.isTrue(registerManifestsStub.notCalled);
                chai_1.assert.isTrue(getDebugManifestsStub.calledOnce);
                chai_1.assert.isTrue(dangerouslyForceDebugStub.notCalled);
                chai_1.assert.isTrue(getDebugManifestsStub.calledWith(mockComponentLoader, false, undefined, false));
                chai_1.assert.isTrue(registerDebugManifestsStub.calledOnce);
                chai_1.assert.isTrue(registerDebugManifestsStub.calledWith(expectedResult));
                done();
            }).catch(function (error) {
                chai_1.assert.fail();
                done();
            });
        });
        it('registers manifests as production manifests', function (done) {
            var expectedResult = { 'a': { id: 'a' }, 'b': { id: 'b' } }; 
            installGetDebugManifestsSpy(function () { return Promise.resolve(expectedResult); });
            var resultPromise = debugManifestProvider_1.loadDebugManifests(mockComponentLoader, undefined, false, false, false, true);
            resultPromise.then(function () {
                chai_1.assert.isTrue(registerDebugManifestsStub.notCalled);
                chai_1.assert.isTrue(getDebugManifestsStub.calledOnce);
                chai_1.assert.isTrue(getDebugManifestsStub.calledWith(mockComponentLoader, false, undefined, false));
                chai_1.assert.isTrue(dangerouslyForceDebugStub.notCalled);
                chai_1.assert.isTrue(registerManifestsStub.calledOnce);
                chai_1.assert.isTrue(registerManifestsStub.calledWith([expectedResult['a'], expectedResult['b']], false));
                done();
            }).catch(function (error) {
                chai_1.assert.fail();
                done();
            });
        });
        it('calls DebugManifestPrompt.confirmDebugAllowed with true if there are manifests', function (done) {
            var expectedResult = { 'a': {}, 'b': {} }; 
            installGetDebugManifestsSpy(function () { return Promise.resolve(expectedResult); });
            var resultPromise = debugManifestProvider_1.loadDebugManifests(mockComponentLoader);
            resultPromise.then(function () {
                chai_1.assert.isTrue(registerManifestsStub.notCalled);
                chai_1.assert.isTrue(getDebugManifestsStub.calledOnce);
                chai_1.assert.isTrue(getDebugManifestsStub.calledWith(mockComponentLoader, false, undefined, false));
                chai_1.assert.isTrue(dangerouslyForceDebugStub.notCalled);
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledOnce);
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledWith(true));
                done();
            }).catch(function (error) {
                chai_1.assert.fail();
                done();
            });
        });
        it('calls DebugManifestPrompt.confirmDebugAllowed with false if there are no manifests', function (done) {
            var expectedResult = {};
            installGetDebugManifestsSpy(function () { return Promise.resolve(expectedResult); });
            var resultPromise = debugManifestProvider_1.loadDebugManifests(mockComponentLoader);
            resultPromise.then(function () {
                chai_1.assert.isTrue(registerManifestsStub.notCalled);
                chai_1.assert.isTrue(getDebugManifestsStub.calledOnce);
                chai_1.assert.isTrue(getDebugManifestsStub.calledWith(mockComponentLoader, false, undefined, false));
                chai_1.assert.isTrue(dangerouslyForceDebugStub.notCalled);
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledOnce);
                chai_1.assert.isTrue(confirmDebugAllowedStub.calledWith(false));
                done();
            }).catch(function (error) {
                chai_1.assert.fail();
                done();
            });
        });
    });
});
function getFragment(url) {
    var fragment = Url.parse(url).hash;
    if (fragment && fragment.indexOf('#') === 0) {
        return fragment.substr(1);
    }
    else {
        return fragment;
    }
}
function clearFragment() {
    var location = window.location.toString();
    var hashIndex = location.indexOf('#');
    if (hashIndex !== -1) {
        window.history.replaceState('', document.title, location.substring(0, hashIndex));
    }
}
