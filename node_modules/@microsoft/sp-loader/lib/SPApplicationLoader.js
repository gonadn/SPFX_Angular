"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_telemetry_1 = require("@ms/sp-telemetry");
var SPComponentLoaderProxy_1 = require("./SPComponentLoaderProxy");
var ManifestStore_1 = require("./stores/ManifestStore");
var componentConstants = require("./utilities/componentConstants");
var telemetryConstants = require("./utilities/telemetryConstants");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var SPLoader_resx_1 = require("./SPLoader.resx");
var SPApplicationLoader = (function () {
    function SPApplicationLoader() {
    }
    SPApplicationLoader.startApplication = function (preloadedData) {
        var qosMonitor = new sp_telemetry_1._QosMonitor(telemetryConstants.startQosScenarioName);
        setTimeout(function () {
            if (!qosMonitor.hasEnded) {
                qosMonitor.writeExpectedFailure(telemetryConstants.timeoutExpectedFailure);
            }
        }, SPApplicationLoader.TIMEOUT_IN_MILISECONDS);
        return SPApplicationLoader._startApplication(preloadedData, qosMonitor);
    };
    SPApplicationLoader._startApplication = function (preloadedData, qosMonitor) {
        var _this = this;
        function error(message, failureId) {
            var error = new Error(message);
            sp_telemetry_1._TraceLogger.logError(telemetryConstants.startLogSource, error);
            qosMonitor.writeUnexpectedFailure(failureId, error);
            throw error;
        }
        return Promise.resolve().then(function () {
            var platformManifest = _this._getPlatformManifest(error);
            var applicationId = preloadedData.clientSideApplicationId;
            var applicationManifest = _this._getApplicationManifest(applicationId, error);
            var platformPromise = _this._loadPlatform(platformManifest, error);
            var applicationPromise = _this._loadApplication(applicationManifest, error);
            return Promise.all([platformPromise, applicationPromise])
                .then(function (modules) {
                var platform = modules[0];
                var application = modules[1];
                if (platform && application) {
                    return platform._spShell.start(application, preloadedData).then(function (result) {
                        qosMonitor.writeSuccess();
                        return result;
                    }).catch(function (e) {
                        error(sp_core_library_1.Text.format(SPLoader_resx_1.default.applicationFailedToInitializeError, e), telemetryConstants.shellStartFailure);
                    });
                }
                else if (!platform) {
                    error(sp_core_library_1.Text.format(SPLoader_resx_1.default.platformFailedToLoadError, componentConstants.spApplicationBaseComponentId, componentConstants.spApplicationBaseName), telemetryConstants.platformFailedToLoadFailure);
                }
                else {
                    error(sp_core_library_1.Text.format(SPLoader_resx_1.default.applicationFailedToLoadError, applicationManifest.id, applicationManifest.loaderConfig.entryModuleId), telemetryConstants.applicationFailedToLoadFailure);
                }
            });
        });
    };
    SPApplicationLoader._getPlatformManifest = function (error) {
        return this._getManifest(componentConstants.spApplicationBaseComponentId, error, telemetryConstants.missingPlatformManifestFailure);
    };
    SPApplicationLoader._getApplicationManifest = function (applicationId, error) {
        return this._getManifest(applicationId, error, telemetryConstants.missingApplicationManifestFailure);
    };
    SPApplicationLoader._getManifest = function (componentId, error, failureId) {
        var manifest = ManifestStore_1.default.instance.tryGetManifest(componentId);
        if (!manifest) {
            return error(sp_core_library_1.Text.format(SPLoader_resx_1.default.manifestNotFoundByIdError, componentId), failureId);
        }
        return manifest;
    };
    SPApplicationLoader._loadPlatform = function (manifest, error) {
        return this._loadComponent(manifest, error, SPLoader_resx_1.default.platformFailedToLoadWithMessageError, telemetryConstants.platformFailedToLoadFailure);
    };
    SPApplicationLoader._loadApplication = function (manifest, error) {
        return this._loadComponent(manifest, error, SPLoader_resx_1.default.applicationFailedToLoadWithMessageError, telemetryConstants.applicationFailedToLoadFailure);
    };
    SPApplicationLoader._loadComponent = function (manifest, error, errorMessage, failureId) {
        return SPComponentLoaderProxy_1.default.loadComponent(manifest)
            .catch(function (e) {
            return error(sp_core_library_1.Text.format(errorMessage, manifest.id, manifest.loaderConfig.entryModuleId, e.message), failureId);
        });
    };
    return SPApplicationLoader;
}());
SPApplicationLoader.TIMEOUT_IN_MILISECONDS = 10000;
exports.default = SPApplicationLoader;
