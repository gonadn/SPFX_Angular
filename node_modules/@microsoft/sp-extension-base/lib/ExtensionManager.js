"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_loader_1 = require("@microsoft/sp-loader");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var BaseExtension_1 = require("./BaseExtension");
var ExtensionManager = (function () {
    function ExtensionManager(serviceScope, expectedType) {
        this._serviceScope = serviceScope;
        this._extensionPromises = [];
        this._expectedType = expectedType;
    }
    ExtensionManager.prototype.createExtension = function (componentId, propertiesJson, contextCreator) {
        var _this = this;
        if (DATACENTER) {
            try {
                var manifest_1 = sp_loader_1.SPComponentLoader
                    .tryGetManifestById(componentId);
                if (!manifest_1) {
                    throw new Error("Manifest not found for componentId '" + componentId + "'");
                }
                var promise = sp_loader_1.SPComponentLoader.loadComponent(manifest_1)
                    .then(function (component) {
                    var extensionClass = component.default;
                    var extension = new extensionClass();
                    if (!(extension instanceof BaseExtension_1.default)) {
                        throw new Error('Expecting a class that extends BaseExtension');
                    }
                    if (!(extension instanceof _this._expectedType)) {
                        throw new Error("Expecting a class that extends " + _this._expectedType);
                    }
                    var context = contextCreator({
                        manifest: manifest_1,
                        parentServiceScope: _this._serviceScope,
                        loggingTag: "Extension." + manifest_1.alias
                    });
                    return extension._init(context, propertiesJson).then(function () {
                        return extension;
                    }).catch(function (e) {
                        throw new Error("Extension not found for componentId '" + componentId + "'");
                    });
                }).catch(function (e) {
                    throw new Error("Extension not found for componentId '" + componentId + "'");
                });
                this._extensionPromises.push(promise);
                return promise;
            }
            catch (e) {
                return Promise.reject(e);
            }
        }
        else {
            var unsupportedOperationError = new Error('Extensions are not supported for On-Premises.');
            sp_telemetry_1._TraceLogger.logError(ExtensionManager._logSource, unsupportedOperationError);
            return Promise.reject(unsupportedOperationError);
        }
    };
    ExtensionManager.prototype.waitForInitialization = function () {
        return Promise.all(this._extensionPromises);
    };
    ExtensionManager.prototype.dispose = function () {
        var promisesToDispose = this._extensionPromises;
        this._extensionPromises = [];
        for (var _i = 0, promisesToDispose_1 = promisesToDispose; _i < promisesToDispose_1.length; _i++) {
            var promise = promisesToDispose_1[_i];
            promise.then(function (extension) {
                try {
                    extension.onDispose();
                }
                catch (e) {
                    var manifest = extension.context.manifest;
                    sp_telemetry_1._TraceLogger.logError(ExtensionManager._logSource, new Error("Failed to dispose extension \"" + manifest.alias + "\"\n              + \" with id=" + manifest.id + ": " + e.message));
                }
            });
        }
    };
    return ExtensionManager;
}());
ExtensionManager._logSource = sp_telemetry_1._LogSource.create('ExtensionManager');
exports.default = ExtensionManager;
