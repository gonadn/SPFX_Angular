{"version":3,"sources":["SetWebpackPublicPathLoader.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;AAEH,iCAA+B;AAC/B,IAAM,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,8BAA8B;AAE3E,iDAIyB;AAazB;IA+CE;QACE,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;IAC7E,CAAC;IAvCa,gDAAqB,GAAnC,UAAoC,KAAsB;QAAtB,sBAAA,EAAA,aAAsB;QACxD,MAAM,CAAC,qCAAqB,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAEa,qCAAU,GAAxB,UAAyB,OAA2C;QAClE,IAAI,CAAC,aAAa,GAAG,OAAO,IAAI,EAAE,CAAC;IACrC,CAAC;IAEa,gCAAK,GAAnB,UAAoB,gBAAwB;QAC1C,2BAA2B;QAC3B,IAAM,IAAI,GAAQ,IAAI,CAAC;QACvB,0BAA0B;QAE1B,IAAM,OAAO,GAAqB,0BAA0B,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC9E,MAAM,CAAC,oCAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACzD,CAAC;IAEc,qCAAU,GAAzB,UAA0B,OAAY;QACpC,IAAM,YAAY,GAAuC,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAEzF,IAAM,OAAO,GACX,cAAK,CAAC,cAAK,CAAC,EAAE,EAAE,0BAA0B,CAAC,aAAa,CAAC,EAAE,YAAY,CAAC,CAAC;QAE3E,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YAC3C,oEAAoE;YACpE,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;QAChC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC;QACzC,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC,CAAC;YACvC,OAAO,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QAChE,CAAC;QAED,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAKH,iCAAC;AAAD,CAlDA,AAkDC;AAjDe,0CAAe,GAAW,kDAAkD,CAAC;AAE5E,wCAAa,GAAuC;IACjE,QAAQ,EAAE,KAAK;IACf,UAAU,EAAE,SAAS;IACrB,SAAS,EAAE,SAAS;IACpB,UAAU,EAAE,SAAS;CACtB,CAAC;AARS,gEAA0B","file":"SetWebpackPublicPathLoader.js","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\nimport { merge } from 'lodash';\r\nconst loaderUtils = require('loader-utils'); // tslint:disable-line:typedef\r\n\r\nimport {\r\n  IInternalOptions,\r\n  getSetPublicPathCode,\r\n  getGlobalRegisterCode\r\n} from './codeGenerator';\r\n\r\nexport interface ISetWebpackPublicPathLoaderOptions extends ISetWebpackPublicPathOptions {\r\n  scriptName?: string;\r\n}\r\n\r\nexport interface ISetWebpackPublicPathOptions {\r\n  systemJs?: boolean;\r\n  urlPrefix?: string;\r\n  publicPath?: string;\r\n  regexVariable?: string;\r\n}\r\n\r\nexport class SetWebpackPublicPathLoader {\r\n  public static registryVarName: string = 'window.__setWebpackPublicPathLoaderSrcRegistry__';\r\n\r\n  private static staticOptions: ISetWebpackPublicPathLoaderOptions = {\r\n    systemJs: false,\r\n    scriptName: undefined,\r\n    urlPrefix: undefined,\r\n    publicPath: undefined\r\n  };\r\n\r\n  public static getGlobalRegisterCode(debug: boolean = false): string {\r\n    return getGlobalRegisterCode(debug);\r\n  }\r\n\r\n  public static setOptions(options: ISetWebpackPublicPathLoaderOptions): void {\r\n    this.staticOptions = options || {};\r\n  }\r\n\r\n  public static pitch(remainingRequest: string): string {\r\n    /* tslint:disable:no-any */\r\n    const self: any = this;\r\n    /* tslint:enable:no-any */\r\n\r\n    const options: IInternalOptions = SetWebpackPublicPathLoader.getOptions(self);\r\n    return getSetPublicPathCode(options, self.emitWarning);\r\n  }\r\n\r\n  private static getOptions(context: any): IInternalOptions { // tslint:disable-line:no-any\r\n    const queryOptions: ISetWebpackPublicPathLoaderOptions = loaderUtils.getOptions(context);\r\n\r\n    const options: ISetWebpackPublicPathLoaderOptions & IInternalOptions =\r\n      merge(merge({}, SetWebpackPublicPathLoader.staticOptions), queryOptions);\r\n\r\n    if (options.systemJs || options.publicPath) {\r\n      // If ?systemJs or ?publicPath=... is set inline, override regexName\r\n      options.regexName = undefined;\r\n    } else {\r\n      options.regexName = options.scriptName;\r\n    }\r\n\r\n    if (!options.webpackPublicPathVariable) {\r\n      options.webpackPublicPathVariable = '__webpack_public_path__';\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  constructor() {\r\n    throw new Error('Constructing \"LoadThemedStylesLoader\" is not supported.');\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}