/*
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
 * See LICENSE in the project root for license information.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var loaderUtils = require('loader-utils'); // tslint:disable-line:typedef
var codeGenerator_1 = require("./codeGenerator");
var SetWebpackPublicPathLoader = (function () {
    function SetWebpackPublicPathLoader() {
        throw new Error('Constructing "LoadThemedStylesLoader" is not supported.');
    }
    SetWebpackPublicPathLoader.getGlobalRegisterCode = function (debug) {
        if (debug === void 0) { debug = false; }
        return codeGenerator_1.getGlobalRegisterCode(debug);
    };
    SetWebpackPublicPathLoader.setOptions = function (options) {
        this.staticOptions = options || {};
    };
    SetWebpackPublicPathLoader.pitch = function (remainingRequest) {
        /* tslint:disable:no-any */
        var self = this;
        /* tslint:enable:no-any */
        var options = SetWebpackPublicPathLoader.getOptions(self);
        return codeGenerator_1.getSetPublicPathCode(options, self.emitWarning);
    };
    SetWebpackPublicPathLoader.getOptions = function (context) {
        var queryOptions = loaderUtils.getOptions(context);
        var options = lodash_1.merge(lodash_1.merge({}, SetWebpackPublicPathLoader.staticOptions), queryOptions);
        if (options.systemJs || options.publicPath) {
            // If ?systemJs or ?publicPath=... is set inline, override regexName
            options.regexName = undefined;
        }
        else {
            options.regexName = options.scriptName;
        }
        if (!options.webpackPublicPathVariable) {
            options.webpackPublicPathVariable = '__webpack_public_path__';
        }
        return options;
    };
    return SetWebpackPublicPathLoader;
}());
SetWebpackPublicPathLoader.registryVarName = 'window.__setWebpackPublicPathLoaderSrcRegistry__';
SetWebpackPublicPathLoader.staticOptions = {
    systemJs: false,
    scriptName: undefined,
    urlPrefix: undefined,
    publicPath: undefined
};
exports.SetWebpackPublicPathLoader = SetWebpackPublicPathLoader;

//# sourceMappingURL=SetWebpackPublicPathLoader.js.map
