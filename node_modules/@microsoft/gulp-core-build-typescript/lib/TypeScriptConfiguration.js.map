{"version":3,"sources":["TypeScriptConfiguration.ts"],"names":[],"mappings":";;AAAA,2BAA6B;AAC7B,sCAAyC;AACzC,8DAA2E;AAQ3E,2BAA2B;AAC3B;;;;GAIG;AACH;IAAA;IA6EA,CAAC;IAzEC;;;OAGG;IACW,gDAAwB,GAAtC,UAAuC,WAAyB;QAC9D,IAAM,IAAI,GAA+B,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;QACxF,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE;YAC3B,OAAO,EAAE,WAAW,CAAC,QAAQ;YAC7B,UAAU,EAAE,IAAI,CAAC,qBAAqB,EAAE;SACzC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACW,6CAAqB,GAAnC,UAAoC,UAAe;QACjD,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;QACrF,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,0EAA0E,CAAC,CAAC;QAC9F,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAChC,CAAC;IAED;;OAEG;IACW,6CAAqB,GAAnC;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;QAC3C,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED;;OAEG;IACY,wCAAgB,GAA/B,UAAgC,MAAoB;QAClD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC;gBACH,IAAI,CAAC,aAAa,GAAG,iCAAe,CAAC,qBAAqB,CACxD,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAC5B,CAAC;YACJ,CAAC;YAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACX,WAAW;YACb,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,aAAa,GAAG;oBACnB,eAAe,EAAE;wBACf,WAAW,EAAE,IAAI;wBACjB,sBAAsB,EAAE,IAAI;wBAC5B,GAAG,EAAE,OAAO;wBACZ,gBAAgB,EAAE,MAAM;wBACxB,SAAS,EAAE,IAAI;wBACf,MAAM,EAAE,KAAK;wBACb,kBAAkB,EAAE,IAAI;wBACxB,cAAc,EAAE,IAAI;qBACrB;iBACF,CAAC;YACJ,CAAC;QACH,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED;;OAEG;IACY,sCAAc,GAA7B,UAA8B,WAAyB;QACrD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC,CAAC;IACxE,CAAC;IACH,8BAAC;AAAD,CA7EA,AA6EC;AA3EgB,mCAAW,GAAQ,SAAS,CAAC;AAFjC,0DAAuB","file":"TypeScriptConfiguration.js","sourcesContent":["import * as path from 'path';\r\nimport assign = require('object-assign');\r\nimport { SchemaValidator, IBuildConfig } from '@microsoft/gulp-core-build';\r\nimport ts = require('gulp-typescript');\r\nimport * as typescript from 'typescript';\r\n\r\nexport interface ITsConfigFile<T> {\r\n  compilerOptions: T;\r\n}\r\n\r\n/* tslint:disable:no-any */\r\n/*\r\n * A helper class which provides access to the TSConfig.json file for a particular project.\r\n * It also is a central place for managing the version of typescript which this project\r\n * should be built with.\r\n */\r\nexport class TypeScriptConfiguration {\r\n  private static _baseTsConfig: ITsConfigFile<ts.Settings>;\r\n  private static _typescript: any = undefined;\r\n\r\n  /**\r\n   * Gets `gulp-typescript` version of the config (used by TypeScriptTask)\r\n   * Returns a new object each time.\r\n   */\r\n  public static getGulpTypescriptOptions(buildConfig: IBuildConfig): ITsConfigFile<ts.Settings> {\r\n    const file: ITsConfigFile<ts.Settings> = assign({}, this._getTsConfigFile(buildConfig));\r\n    assign(file.compilerOptions, {\r\n      rootDir: buildConfig.rootPath,\r\n      typescript: this.getTypescriptCompiler()\r\n    });\r\n    return file;\r\n  }\r\n\r\n  /**\r\n   * Override the version of the typescript compiler\r\n   */\r\n  public static setTypescriptCompiler(typescript: any): void {\r\n    if (this._typescript) {\r\n      throw new Error('The version of the typescript compiler should only be set once.');\r\n    }\r\n    if (this._baseTsConfig) {\r\n      throw new Error('Set the version of the typescript compiler before tasks call getConfig()');\r\n    }\r\n    this._typescript = typescript;\r\n  }\r\n\r\n  /**\r\n   * Get the version of the typescript compiler which is to be used\r\n   */\r\n  public static getTypescriptCompiler(): any {\r\n    if (!this._typescript) {\r\n      this._typescript = require('typescript');\r\n    }\r\n    return this._typescript;\r\n  }\r\n\r\n  /**\r\n   * Helper function which reads the tsconfig.json (or provides one), and memoizes it\r\n   */\r\n  private static _getTsConfigFile(config: IBuildConfig): ITsConfigFile<ts.Settings> {\r\n    if (!this._baseTsConfig) {\r\n      try {\r\n        this._baseTsConfig = SchemaValidator.readCommentedJsonFile<any>(\r\n          this._getConfigPath(config)\r\n        );\r\n      } catch (e) {\r\n        /* no-op */\r\n      }\r\n\r\n      if (!this._baseTsConfig) {\r\n        this._baseTsConfig = {\r\n          compilerOptions: {\r\n            declaration: true,\r\n            experimentalDecorators: true,\r\n            jsx: 'react',\r\n            moduleResolution: 'node',\r\n            sourceMap: true,\r\n            target: 'es5',\r\n            noUnusedParameters: true,\r\n            noUnusedLocals: true\r\n          }\r\n        };\r\n      }\r\n    }\r\n    return this._baseTsConfig;\r\n  }\r\n\r\n  /**\r\n   * Extracts the path to the tsconfig.json based on the buildConfiguration\r\n   */\r\n  private static _getConfigPath(buildConfig: IBuildConfig): string {\r\n    return path.resolve(path.join(buildConfig.rootPath, 'tsconfig.json'));\r\n  }\r\n}"],"sourceRoot":"..\\src"}