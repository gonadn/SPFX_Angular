"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var test_1 = require("@microsoft/sp-core-library/lib/test");
var GraphHttpClient_1 = require("../GraphHttpClient");
var FetchProvider_1 = require("../../httpClient/FetchProvider");
var MockFetchProvider_1 = require("../../test/MockFetchProvider");
describe('GraphHttpClient tests', function () {
    var rootScope = sp_core_library_1.ServiceScope.startNewRoot();
    var fetchProvider = new MockFetchProvider_1.default(rootScope);
    rootScope.provide(FetchProvider_1.fetchProviderServiceKey, fetchProvider);
    var randomNumberGenerator = new test_1.MockRandomNumberGenerator(rootScope);
    rootScope.provide(sp_core_library_1.RandomNumberGenerator.serviceKey, randomNumberGenerator);
    rootScope.finish();
    var graphHttpClient = new GraphHttpClient_1.default(rootScope);
    var fakeToken = 'abc';
    beforeEach(function () {
        sp_telemetry_1._PerformanceLogger.initializeApplication('GraphHttpClientTest');
        graphHttpClient._token = fakeToken; 
    });
    describe('Test automatic headers', function () {
        it('should add headers for a basic GET request', function (done) {
            fetchProvider.expect({
                expectedUrl: 'https://graph.microsoft.com/test01',
                expectedRequestHeaders: [
                    new MockFetchProvider_1.MockedHeader('Accept', 'application/json'),
                    new MockFetchProvider_1.MockedHeader('Authorization', 'Bearer ' + fakeToken),
                    new MockFetchProvider_1.MockedHeader('Content-Type', 'application/json; charset=utf-8')
                ],
                responseObject: { 'data': 123 }
            });
            graphHttpClient.get('test01', GraphHttpClient_1.default.configurations.v1)
                .then(function (response) {
                return response.json();
            }).then(function (responseObject) {
                chai_1.assert.equal(responseObject.data, 123);
                done();
            }).catch(function (error) {
                done(error);
            });
        });
    });
});
